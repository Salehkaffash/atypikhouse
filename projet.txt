Salut, j'ai besoin de toi pour développer notre site, nous avons déjà développé 90% du notre site, il reste juste la partie de notifications et le front du site (le design avec bottstrap !)

du coup je veux t'envoyer tous les fichiers de notre site, comme ca tu peux voir et tu peux analyser le code et pour certain partie du site, tu peux nous aider pour finaliser le site et de mettre en ligne ! 

je t'envoie d'aborde les fichiers et après une photo de maquette pour que t'arrive à coder la maquette !

le site est fait sur javascript et node.js (full js) du coup je veux que tu regarde vraiment tous le site qu'on a fait :

// config -------------------------------

- config/auth.js :
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');
const db = require('../models');

function initialize(passport) {
  const authenticateUser = async (username, password, done) => {
    try {
      const user = await db.User.findOne({ where: { username } });
      if (!user) {
        return done(null, false, { message: 'No user with that username' });
      }

      const isValidPassword = await bcrypt.compare(password, user.password);
      if (isValidPassword) {
        return done(null, user);
      } else {
        return done(null, false, { message: 'Password incorrect' });
      }
    } catch (err) {
      return done(err);
    }
  };

  passport.use(new LocalStrategy({ usernameField: 'username' }, authenticateUser));
  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id, done) => {
    try {
      const user = await db.User.findByPk(id);
      done(null, user);
    } catch (err) {
      done(err);
    }
  });
}

module.exports = initialize;


module.exports.ensureAuthenticated = function (req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  }
  res.redirect('/login');
};


-------------------------------
- config/config.json
{
  "development": {
    "username": "root",
    "password": "root",
    "database": "atypik",
    "host": "127.0.0.1",
    "port": "8889",
    "dialect": "mysql"
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

-------------------------------
- config/database.js
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASS, {
  host: process.env.DB_HOST,
  dialect: 'mysql',
  port: process.env.DB_PORT,
  dialectOptions: {
    connectTimeout: 60000 // 60 seconds
  }
});

module.exports = sequelize;


-------------------------------
- config/multer.js
// config/multer.js
const multer = require('multer');
const path = require('path');

// Configuration du stockage pour les fichiers uploadés
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname)); // Génère un nom de fichier unique basé sur la date actuelle
  }
});

// Configuration de multer pour gérer les fichiers image uniquement
const upload = multer({
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // Limite de taille à 10MB par fichier
  fileFilter: (req, file, cb) => {
    const filetypes = /jpeg|jpg|png|gif/;
    const mimetype = filetypes.test(file.mimetype);
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());

    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Images Only!')); // Erreur si le fichier n'est pas une image
    }
  }
});

module.exports = upload;

-------------------------------
- config/passport.js
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');
const db = require('../models');

const initialize = (passport) => {
  const authenticateUser = async (username, password, done) => {
    try {
      const user = await db.User.findOne({ where: { username: username } });
      if (!user) {
        return done(null, false, { message: 'No user with that username' });
      }

      const isValidPassword = await bcrypt.compare(password, user.password);
      if (isValidPassword) {
        return done(null, user);
      } else {
        return done(null, false, { message: 'Password incorrect' });
      }
    } catch (err) {
      return done(err);
    }
  };

  passport.use(new LocalStrategy({ usernameField: 'username' }, authenticateUser));
  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id, done) => {
    try {
      const user = await db.User.findByPk(id);
      done(null, user);
    } catch (err) {
      done(err);
    }
  });
};

module.exports = initialize;


// middleware -------------------------------

- middleware/auth.js :
module.exports = {
  // Middleware pour vérifier si l'utilisateur est authentifié
  ensureAuthenticated: function (req, res, next) {
    if (req.isAuthenticated()) {
      return next();
    }
    req.flash('error_msg', 'Please log in to view that resource');
    res.redirect('/login');
  },

  // Middleware pour vérifier si l'utilisateur est un admin ou un hébergeur
  ensureAdminOrHebergeur: function (req, res, next) {
    if (req.isAuthenticated() && (req.user.role === 'admin' || req.user.role === 'hebergeur')) {
      return next();
    }
    req.flash('error_msg', 'You do not have permission to view that resource');
    res.redirect('/login');
  },

  // Middleware pour vérifier si l'utilisateur est un admin
  ensureAdmin: function (req, res, next) {
    if (req.isAuthenticated() && req.user.role === 'admin') {
      return next();
    }
    req.flash('error_msg', 'You do not have permission to view that resource');
    res.redirect('/login');
  }
};


-------------------------------
- middleware/Express.js : 
const isAdmin = (req, res, next) => {
    if (req.user && req.user.role === 'admin') {
        next();
    } else {
        res.status(403).send('Access denied');
    }
};

const isHebergeurOrAdmin = (req, res, next) => {
    if (req.user && (req.user.role === 'admin' || req.user.role === 'hebergeur')) {
        next();
    } else {
        res.status(403).send('Access denied');
    }
};

// Utilisation du middleware pour protéger les routes admin
app.use('/admin', isHebergeurOrAdmin, adminRoutes);


// models -------------------------------

- models/blog.js :
// models/blog.js
module.exports = (sequelize, DataTypes) => {
  const Blog = sequelize.define('Blog', {
    title: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    url: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    content: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    image: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    categories: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    publishedAt: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    seoTitle: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    seoDescription: {
      type: DataTypes.TEXT,
      allowNull: true,
    }
  });

  return Blog;
};


-------------------------------
- models/booking.js :
module.exports = (sequelize, DataTypes) => {
  const Booking = sequelize.define('Booking', {
    startDate: {
      type: DataTypes.DATE,
      allowNull: false
    },
    endDate: {
      type: DataTypes.DATE,
      allowNull: false
    },
    status: {
      type: DataTypes.STRING,
      defaultValue: 'pending'
    }
  });

  Booking.associate = models => {
    Booking.belongsTo(models.User, { foreignKey: 'UserId', as: 'user' });
    Booking.belongsTo(models.Housing, { foreignKey: 'HousingId', as: 'housing' });
  };

  return Booking;
};


-------------------------------
- models/comment.js :

module.exports = (sequelize, DataTypes) => {
  const Comment = sequelize.define('Comment', {
    content: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    rating: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    photo: {
      type: DataTypes.STRING,
      allowNull: true,
    },
  });

  Comment.associate = function(models) {
    Comment.belongsTo(models.User, { foreignKey: 'UserId' });
    Comment.belongsTo(models.Housing, { foreignKey: 'HousingId' }); // Assurez-vous que cette ligne est présente
  };

  return Comment;
};


-------------------------------
- models/destination.js :
module.exports = (sequelize, DataTypes) => {
  const Destination = sequelize.define('Destination', {
    name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    location: {
      type: DataTypes.STRING,
      allowNull: false
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: false
    },
    categories: {
      type: DataTypes.STRING,
      allowNull: false
    },
    image: {
      type: DataTypes.STRING,
      allowNull: true
    }
  });

  Destination.associate = function(models) {
    Destination.hasMany(models.Housing, { foreignKey: 'destinationId' }); // Correction: foreignKey 'destinationId' should be lowercase
  };

  return Destination;
};

-------------------------------
- models/equipement.js :
module.exports = (sequelize, DataTypes) => {
  const Equipment = sequelize.define('Equipment', {
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    type: {
      type: DataTypes.ENUM('simple', 'premium'),
      allowNull: false,
    },
  });

  Equipment.associate = function(models) {
    Equipment.belongsToMany(models.Housing, { through: 'HousingEquipments', foreignKey: 'EquipmentId', as: 'HousingsRelated' }); // Changez l'alias pour éviter le conflit
  };
  
    return Equipment;
};


-------------------------------
- models/housing.js :
module.exports = (sequelize, DataTypes) => {
  const Housing = sequelize.define('Housing', {
    title: {
      type: DataTypes.STRING,
      allowNull: false
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: false
    },
    type: {
      type: DataTypes.STRING,
      allowNull: false
    },
    price: {
      type: DataTypes.FLOAT,
      allowNull: false
    },
    capacity: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    image: {
      type: DataTypes.STRING,
      allowNull: true
    },
    themeId: {
      type: DataTypes.INTEGER,
      references: {
        model: 'Themes',
        key: 'id'
      }
    },
    destinationId: {
      type: DataTypes.INTEGER,
      references: {
        model: 'Destinations',
        key: 'id'
      }
    },
    ownerId: {
      type: DataTypes.INTEGER,
      references: {
        model: 'Owners',
        key: 'id'
      }
    }
  }, {
    timestamps: true  // This will add createdAt and updatedAt fields
  });

  Housing.associate = function(models) {
    Housing.belongsTo(models.Theme, { foreignKey: 'themeId' });
    Housing.belongsTo(models.Destination, { foreignKey: 'destinationId' });
    Housing.belongsTo(models.Owner, { foreignKey: 'ownerId', as: 'Owner' }); // Ajout d'un alias pour l'association
    Housing.hasMany(models.Photo, { foreignKey: 'housingId', as: 'Photos' });
    Housing.hasMany(models.Comment, { foreignKey: 'HousingId' });
    Housing.belongsToMany(models.Equipment, { through: 'HousingEquipments', foreignKey: 'HousingId', as: 'Equipments' });
  };

  return Housing;
};


-------------------------------
- models/index.js :
const Sequelize = require('sequelize');
const sequelize = require('../config/database');

const db = {};

db.Sequelize = Sequelize;
db.sequelize = sequelize;

db.User = require('./user')(sequelize, Sequelize.DataTypes);
db.Owner = require('./owner')(sequelize, Sequelize.DataTypes);
db.Housing = require('./housing')(sequelize, Sequelize.DataTypes);
db.Booking = require('./booking')(sequelize, Sequelize.DataTypes);
db.Comment = require('./comment')(sequelize, Sequelize.DataTypes);
db.Equipment = require('./equipment')(sequelize, Sequelize.DataTypes);
db.Theme = require('./theme')(sequelize, Sequelize.DataTypes);
db.Destination = require('./destination')(sequelize, Sequelize.DataTypes);
db.Page = require('./page')(sequelize, Sequelize.DataTypes);
db.Blog = require('./blog')(sequelize, Sequelize.DataTypes);
db.Photo = require('./photo')(sequelize, Sequelize.DataTypes);

// Associations
db.Housing.belongsToMany(db.Equipment, { through: 'HousingEquipments', foreignKey: 'HousingId' });
db.Equipment.belongsToMany(db.Housing, { through: 'HousingEquipments', foreignKey: 'EquipmentId' });

// Ajout du modèle Message
db.Message = require('./message')(sequelize, Sequelize.DataTypes);

// Associations
Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

module.exports = db;


-------------------------------
- models/message.js :
module.exports = (sequelize, DataTypes) => {
  const Message = sequelize.define('Message', {
      name: {
          type: DataTypes.STRING,
          allowNull: false
      },
      email: {
          type: DataTypes.STRING,
          allowNull: false
      },
      phone: {
          type: DataTypes.STRING,
          allowNull: true
      },
      content: {
          type: DataTypes.TEXT,
          allowNull: false
      },
      status: {
          type: DataTypes.STRING,
          defaultValue: 'new'
      },
      housingId: {  // Ajout de cette ligne
          type: DataTypes.INTEGER,
          references: {
              model: 'Housings',
              key: 'id'
          }
      }
  });

  Message.associate = function(models) {
      Message.belongsTo(models.Housing, { foreignKey: 'housingId' }); // Association avec le modèle Housing
  };

  return Message;
};


-------------------------------
- models/owner.js :
module.exports = (sequelize, DataTypes) => {
  const Owner = sequelize.define('Owner', {
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    contact: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    UserId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      references: {
        model: 'Users',
        key: 'id'
      }
    }
  });

  Owner.associate = function(models) {
    Owner.belongsTo(models.User, { foreignKey: 'UserId', as: 'User' }); // Ajout d'un alias pour l'association
    Owner.hasMany(models.Housing, { foreignKey: 'ownerId' });
  };

  return Owner;
};


-------------------------------
- models/page.js :
'use strict';
module.exports = (sequelize, DataTypes) => {
  const Page = sequelize.define('Page', {
    title: {
      type: DataTypes.STRING,
      allowNull: false
    },
    url: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true
    },
    content: {
      type: DataTypes.TEXT,
      allowNull: false
    },
    photo: {
      type: DataTypes.STRING,
      allowNull: true
    },
    seoTitle: {
      type: DataTypes.STRING,
      allowNull: true
    },
    seoDescription: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    status: {
      type: DataTypes.ENUM('published', 'draft', 'archived'),
      defaultValue: 'draft'
    }
  });

  return Page;
};


-------------------------------
- models/photo.js :
// models/photo.js
module.exports = (sequelize, DataTypes) => {
    const Photo = sequelize.define('Photo', {
      path: {
        type: DataTypes.STRING,
        allowNull: false, // Le chemin de l'image doit être défini
      },
      housingId: {
        type: DataTypes.INTEGER,
        references: {
          model: 'Housings', // Utilisation du nom correct de la table
          key: 'id',
        },
        onDelete: 'CASCADE', // Supprimer les photos si l'hébergement est supprimé
        onUpdate: 'CASCADE',
      },
    }, {
      timestamps: true // Ajoute les champs createdAt et updatedAt
    });
  
    Photo.associate = function(models) {
      Photo.belongsTo(models.Housing, { foreignKey: 'housingId' }); // Association avec le modèle Housing
    };
  
    return Photo;
  };
  

-------------------------------
- models/theme.js :
// models/theme.js
module.exports = (sequelize, DataTypes) => {
  const Theme = sequelize.define('Theme', {
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    subtitle: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    description: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    image: {
      type: DataTypes.STRING,
      allowNull: true,
    },
  });

  Theme.associate = (models) => {
    Theme.hasMany(models.Housing, { foreignKey: 'themeId' });
  };

  return Theme;
};


-------------------------------
- models/user.js :
module.exports = (sequelize, DataTypes) => {
  const User = sequelize.define('User', {
    username: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    role: {
      type: DataTypes.STRING,
      defaultValue: 'user',
    },
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    phone: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    address: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    photo: {
      type: DataTypes.STRING,
      allowNull: true,
    },
  });

  User.associate = function(models) {
    User.hasMany(models.Booking, { foreignKey: 'UserId', as: 'bookings' });
    User.hasMany(models.Comment, { foreignKey: 'UserId', as: 'comments' });
  };

  return User;
};


// routes -------------------------------

- routes/admin.js :
// routes/admin.js
const express = require('express');
const router = express.Router();
const { ensureAuthenticated, ensureAdminOrHebergeur, ensureAdmin } = require('../middleware/auth');
const db = require('../models');
const { Op } = require('sequelize');  // Assurez-vous d'importer Op ici
const upload = require('../config/multer');


// Fonction pour récupérer les thèmes et les destinations
const getCommonData = async () => {
  const themes = await db.Theme.findAll();
  const destinations = await db.Destination.findAll();
  return { themes, destinations };
};

// Tableau de bord de l'administrateur ou hébergeur
router.get('/', ensureAdminOrHebergeur, async (req, res) => {
  const { themes, destinations } = await getCommonData();
  res.render('admin/dashboard', { title: 'Tableau de bord', partial: 'dashboard', themes, destinations });
});


// Thèmes -----------------------------------------------

// Route pour afficher tous les thèmes
router.get('/themes', ensureAdmin, async (req, res) => {
  try {
    const themes = await db.Theme.findAll();
    const { destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Gestion des Thèmes', partial: 'theme', themes, destinations });
  } catch (err) {
    console.error('Error fetching themes:', err);
    res.status(500).send('Error fetching themes');
  }
});

// Route pour afficher le formulaire de création d'un nouveau thème
router.get('/themes/new', ensureAdmin, async (req, res) => {
  const { themes, destinations } = await getCommonData();
  res.render('admin/dashboard', { title: 'Ajouter un nouveau thème', partial: 'newTheme', themes, destinations });
});

// Route pour créer un nouveau thème
router.post('/themes/new', ensureAdmin, upload.single('image'), async (req, res) => {
  try {
    const { name, subtitle, description } = req.body;
    const image = req.file ? req.file.path : null;
    await db.Theme.create({
      name,
      subtitle,
      description,
      image
    });
    res.redirect('/admin/themes');
  } catch (err) {
    console.error('Error creating theme:', err);
    res.status(500).send('Error creating theme');
  }
});

// Route pour afficher le formulaire d'édition d'un thème
router.get('/themes/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const theme = await db.Theme.findByPk(req.params.id);
    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Modifier le thème', partial: 'editTheme', theme, themes, destinations });
  } catch (err) {
    console.error('Error fetching theme:', err);
    res.status(500).send('Error fetching theme');
  }
});

// Route pour mettre à jour un thème
router.post('/themes/edit/:id', ensureAdmin, upload.single('image'), async (req, res) => {
  try {
    const { name, subtitle, description } = req.body;
    const image = req.file ? req.file.path : req.body.existingImage;

    const theme = await db.Theme.findByPk(req.params.id);
    await theme.update({
      name,
      subtitle,
      description,
      image
    });

    res.redirect('/admin/themes');
  } catch (err) {
    console.error('Error updating theme:', err);
    res.status(500).send('Error updating theme');
  }
});

// Route pour supprimer un thème
router.post('/themes/delete/:id', ensureAdmin, async (req, res) => {
  try {
    const theme = await db.Theme.findByPk(req.params.id);
    await theme.destroy();
    res.redirect('/admin/themes');
  } catch (err) {
    console.error('Error deleting theme:', err);
    res.status(500).send('Error deleting theme');
  }
});


// Pages -----------------------------------------------

// Route pour afficher toutes les pages
router.get('/pages', ensureAdmin, async (req, res) => {
  try {
    const pages = await db.Page.findAll();
    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Gestion des Pages', partial: 'pages', pages, themes, destinations });
  } catch (err) {
    console.error('Error fetching pages:', err);
    res.status(500).send('Error fetching pages');
  }
});

// Route pour afficher le formulaire de création d'une nouvelle page
router.get('/pages/new', ensureAdmin, async (req, res) => {
  const { themes, destinations } = await getCommonData();
  res.render('admin/dashboard', { title: 'Ajouter une nouvelle page', partial: 'newPage', themes, destinations });
});

// Route pour créer une nouvelle page
router.post('/pages/new', ensureAdmin, async (req, res) => {
  try {
    await db.Page.create(req.body);
    res.redirect('/admin/pages');
  } catch (err) {
    console.error('Error creating page:', err);
    res.status(500).send('Error creating page');
  }
});

// Route pour afficher le formulaire d'édition d'une page
router.get('/pages/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const page = await db.Page.findByPk(req.params.id);
    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Modifier la page', partial: 'editPage', page, themes, destinations });
  } catch (err) {
    console.error('Error fetching page:', err);
    res.status(500).send('Error fetching page');
  }
});

router.post('/pages/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const page = await db.Page.findByPk(req.params.id);
    await page.update(req.body);
    res.redirect('/admin/pages');
  } catch (err) {
    console.error('Error updating page:', err);
    res.status(500).send('Error updating page');
  }
});


// Hébergements -----------------------------------------------

// Route pour afficher tous les hébergements
router.get('/hebergements', ensureAdminOrHebergeur, async (req, res) => {
  try {
    let hebergements;

    if (req.user.role === 'admin') {
      // Si l'utilisateur est un admin, il peut voir tous les hébergements
      hebergements = await db.Housing.findAll({
        include: [
          { model: db.Photo, as: 'Photos' },
          { model: db.Equipment },
          { model: db.Theme },
          { model: db.Destination }
        ]
      });
    } else if (req.user.role === 'hebergeur') {
      // Si l'utilisateur est un hébergeur, il ne peut voir que ses propres hébergements
      const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });
      if (!owner) {
        return res.status(403).send('Accès refusé');
      }

      hebergements = await db.Housing.findAll({
        where: { ownerId: owner.id },
        include: [
          { model: db.Photo, as: 'Photos' },
          { model: db.Equipment },
          { model: db.Theme },
          { model: db.Destination }
        ]
      });
    }

    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Gestion des Hébergements', partial: 'hebergements', hebergements, themes, destinations });
  } catch (err) {
    console.error('Error fetching hebergements:', err);
    res.status(500).send('Error fetching hebergements');
  }
});


// Route pour afficher le formulaire de création d'un nouvel hébergement
router.get('/hebergements/new', ensureAdminOrHebergeur, async (req, res) => {
  try {
    const { themes, destinations } = await getCommonData();
    const simpleEquipments = await db.Equipment.findAll({ where: { type: 'simple' } });
    const premiumEquipments = await db.Equipment.findAll({ where: { type: 'premium' } });
    
    res.render('admin/dashboard', { 
      title: 'Ajouter un nouvel hébergement', 
      partial: 'newHebergement', 
      themes, 
      destinations,
      simpleEquipments,
      premiumEquipments
    });
  } catch (err) {
    console.error('Error fetching themes, destinations, or equipments:', err);
    res.status(500).send('Server Error');
  }
});

// Route pour créer un nouvel hébergement
router.post('/hebergements/new', ensureAdminOrHebergeur, upload.array('images', 10), async (req, res) => {
  const transaction = await db.sequelize.transaction();

  try {
    const { title, description, type, price, capacity, themeId, destinationId, simpleEquipments = [], premiumEquipments = [] } = req.body;

    const allEquipments = [].concat(simpleEquipments, premiumEquipments).map(Number);

    const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });

    const housing = await db.Housing.create({
      title,
      description,
      type,
      price,
      capacity,
      themeId,
      destinationId,
      ownerId: owner.id
    }, { transaction });

    if (req.files && req.files.length > 0) {
      const images = req.files.map(file => ({
        path: file.path,
        housingId: housing.id
      }));
      await db.Photo.bulkCreate(images, { transaction });
    }

    if (allEquipments.length > 0) {
      await housing.setEquipments(allEquipments, { transaction });
    }

    await transaction.commit();
    res.redirect('/admin/hebergements');
  } catch (err) {
    await transaction.rollback();
    console.error('Error creating hebergement:', err.message);
    res.status(500).send('Error creating hebergement');
  }
});


// Route pour afficher le formulaire d'édition d'un hébergement
router.get('/hebergements/edit/:id', ensureAdminOrHebergeur, async (req, res) => {
  try {
    const hebergement = await db.Housing.findByPk(req.params.id, {
      include: [
        { model: db.Photo, as: 'Photos' },
        { model: db.Equipment, as: 'Equipments' }
      ]
    });
    const { themes, destinations } = await getCommonData();
    const simpleEquipments = await db.Equipment.findAll({ where: { type: 'simple' } });
    const premiumEquipments = await db.Equipment.findAll({ where: { type: 'premium' } });

    if (!hebergement) {
      return res.status(404).send('Hébergement non trouvé');
    }

    if (req.user.role === 'hebergeur') {
      const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });
      if (!owner || hebergement.ownerId !== owner.id) {
        return res.status(403).send('Accès refusé');
      }
    }
    
    res.render('admin/dashboard', { 
      title: "Modifier l'hébergement", 
      partial: 'editHebergement', 
      hebergement, 
      themes, 
      destinations,
      simpleEquipments,
      premiumEquipments
    });
  } catch (err) {
    console.error('Error fetching hebergement, themes, destinations, or equipments:', err);
    res.status(500).send('Server Error');
  }
});

// Route pour mettre à jour un hébergement
router.post('/hebergements/edit/:id', ensureAdminOrHebergeur, upload.array('images', 10), async (req, res) => {
  try {
    const { title, description, type, price, capacity, themeId, destinationId, simpleEquipments = [], premiumEquipments = [] } = req.body;

    const hebergement = await db.Housing.findByPk(req.params.id);

    if (req.user.role === 'hebergeur') {
      const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });
      if (!owner || hebergement.ownerId !== owner.id) {
        return res.status(403).send('Accès refusé');
      }
    }

    await hebergement.update({
      title,
      description,
      type,
      price,
      capacity,
      themeId,
      destinationId
    });

    if (req.files.length > 0) {
      const images = req.files.map(file => ({
        path: file.path,
        housingId: hebergement.id
      }));
      await db.Photo.bulkCreate(images);
    }

    const allEquipments = [...simpleEquipments, ...premiumEquipments];
    await hebergement.setEquipments(allEquipments);

    res.redirect('/admin/hebergements');
  } catch (err) {
    console.error('Error updating hebergement:', err);
    res.status(500).send('Error updating hebergement');
  }
});

// Route pour supprimer un hébergement
router.post('/hebergements/delete/:id', ensureAdminOrHebergeur, async (req, res) => {
  try {
    const hebergement = await db.Housing.findByPk(req.params.id);

    if (req.user.role === 'hebergeur') {
      const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });
      if (!owner || hebergement.ownerId !== owner.id) {
        return res.status(403).send('Accès refusé');
      }
    }

    if (!hebergement) {
      req.flash('error', 'Hébergement non trouvé');
      return res.redirect('/admin/hebergements');
    }
    await hebergement.destroy();
    req.flash('success', 'Hébergement supprimé avec succès');
    res.redirect('/admin/hebergements');
  } catch (err) {
    console.error('Error deleting hebergement:', err.message);
    req.flash('error', 'Erreur lors de la suppression de l\'hébergement');
    res.status(500).redirect('/admin/hebergements');
  }
});


// Destination -----------------------------------------------

// Route pour afficher toutes les destinations
router.get('/destinations', ensureAdmin, async (req, res) => {
  try {
    const destinations = await db.Destination.findAll();
    const { themes } = await getCommonData();
    res.render('admin/dashboard', { title: 'Gestion des Destinations', partial: 'destination', destinations, themes });
  } catch (err) {
    console.error('Error fetching destinations:', err);
    res.status(500).send('Error fetching destinations');
  }
});

// Route pour afficher le formulaire de création d'une nouvelle destination
router.get('/destinations/new', ensureAdmin, async (req, res) => {
  const { themes, destinations } = await getCommonData();
  res.render('admin/dashboard', { title: 'Ajouter une nouvelle destination', partial: 'newDestination', themes, destinations });
});

// Route pour créer une nouvelle destination
router.post('/destinations/new', ensureAdmin, upload.single('image'), async (req, res) => {
  try {
    const { name, location, description, categories } = req.body;
    const image = req.file ? req.file.path : null;

    await db.Destination.create({
      name,
      location,
      description,
      categories,
      image
    });

    res.redirect('/admin/destinations');
  } catch (err) {
    console.error('Error creating destination:', err);
    res.status(500).send('Error creating destination');
  }
});

// Route pour afficher le formulaire d'édition d'une destination
router.get('/destinations/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const destination = await db.Destination.findByPk(req.params.id);
    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Modifier la destination', partial: 'editDestination', destination, themes, destinations });
  } catch (err) {
    console.error('Error fetching destination:', err);
    res.status(500).send('Error fetching destination');
  }
});

// Route pour mettre à jour une destination
router.post('/destinations/edit/:id', ensureAdmin, upload.single('image'), async (req, res) => {
  try {
    const { name, location, description, categories } = req.body;
    const image = req.file ? req.file.path : req.body.existingImage;

    const destination = await db.Destination.findByPk(req.params.id);
    await destination.update({
      name,
      location,
      description,
      categories,
      image
    });

    res.redirect('/admin/destinations');
  } catch (err) {
    console.error('Error updating destination:', err);
    res.status(500).send('Error updating destination');
  }
});

// Route pour supprimer une destination
router.post('/destinations/delete/:id', ensureAdmin, async (req, res) => {
  try {
    const destination = await db.Destination.findByPk(req.params.id);
    await destination.destroy();
    res.redirect('/admin/destinations');
  } catch (err) {
    console.error('Error deleting destination:', err);
    res.status(500).send('Error deleting destination');
  }
});



// Blog -----------------------------------------------

// Route pour afficher tous les articles de blog
router.get('/blog', ensureAdmin, async (req, res) => {
  try {
    const articles = await db.Blog.findAll();
    res.render('admin/dashboard', { title: 'Gestion des Articles de Blog', partial: 'blog', articles });
  } catch (err) {
    console.error('Error fetching blog articles:', err);
    res.status(500).send('Error fetching blog articles');
  }
});

// Route pour afficher le formulaire de création d'un nouvel article
router.get('/blog/new', ensureAdmin, (req, res) => {
  res.render('admin/dashboard', { title: 'Ajouter un nouvel article', partial: 'newArticle' });
});

// Route pour créer un nouvel article de blog
router.post('/blog/new', ensureAdmin, upload.single('image'), async (req, res) => {
  try {
    const { title, content, categories, seoTitle, seoDescription, publishedAt } = req.body;
    const url = req.body.url || title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
    const image = req.file ? req.file.path : null;

    await db.Blog.create({
      title,
      url,
      content,
      image,
      categories,
      seoTitle,
      seoDescription,
      publishedAt
    });

    res.redirect('/admin/blog');
  } catch (err) {
    console.error('Error creating blog article:', err);
    res.status(500).send('Error creating blog article');
  }
});

// Route pour afficher le formulaire d'édition d'un article
router.get('/blog/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const article = await db.Blog.findByPk(req.params.id);
    res.render('admin/dashboard', { title: 'Modifier l\'article', partial: 'editArticle', article });
  } catch (err) {
    console.error('Error fetching blog article:', err);
    res.status(500).send('Error fetching blog article');
  }
});

// Route pour mettre à jour un article de blog
router.post('/blog/edit/:id', ensureAdmin, upload.single('image'), async (req, res) => {
  try {
    const { title, content, categories, seoTitle, seoDescription, publishedAt } = req.body;
    const url = req.body.url || title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
    const image = req.file ? req.file.path : req.body.existingImage;

    const article = await db.Blog.findByPk(req.params.id);
    await article.update({
      title,
      url,
      content,
      image,
      categories,
      seoTitle,
      seoDescription,
      publishedAt
    });

    res.redirect('/admin/blog');
  } catch (err) {
    console.error('Error updating blog article:', err);
    res.status(500).send('Error updating blog article');
  }
});

// Route pour supprimer un article de blog
router.post('/blog/delete/:id', ensureAdmin, async (req, res) => {
  try {
    const article = await db.Blog.findByPk(req.params.id);
    await article.destroy();
    res.redirect('/admin/blog');
  } catch (err) {
    console.error('Error deleting blog article:', err);
    res.status(500).send('Error deleting blog article');
  }
});



// Avis -----------------------------------------------

// Route pour afficher tous les avis
router.get('/avis', ensureAdminOrHebergeur, async (req, res) => {
  try {
    let avis;

    if (req.user.role === 'admin') {
      // L'admin peut voir tous les avis
      avis = await db.Comment.findAll({
        include: [
          { model: db.User, attributes: ['firstName', 'lastName'] },
          { model: db.Housing, attributes: ['title'] }
        ]
      });
    } else if (req.user.role === 'hebergeur') {
      // L'hébergeur ne voit que les avis sur ses propres hébergements
      const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });
      if (!owner) {
        return res.status(403).send('Accès refusé');
      }

      avis = await db.Comment.findAll({
        include: [
          { model: db.User, attributes: ['firstName', 'lastName'] },
          { model: db.Housing, where: { ownerId: owner.id }, attributes: ['title'] }
        ]
      });
    }

    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { 
      title: 'Gestion des Avis', 
      partial: 'avis', 
      avis, 
      themes, 
      destinations,
      userRole: req.user.role // Passer le rôle de l'utilisateur à la vue
    });
  } catch (err) {
    console.error('Error fetching comments:', err);
    res.status(500).send('Error fetching comments');
  }
});



// Route pour afficher le formulaire d'édition d'un avis
router.get('/avis/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const avis = await db.Comment.findByPk(req.params.id);
    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Modifier l\'avis', partial: 'editAvis', avis, themes, destinations });
  } catch (err) {
    console.error('Error fetching comment:', err);
    res.status(500).send('Error fetching comment');
  }
});

// Route pour mettre à jour un avis
router.post('/avis/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const avis = await db.Comment.findByPk(req.params.id);
    await avis.update(req.body);
    res.redirect('/admin/avis');
  } catch (err) {
    console.error('Error updating comment:', err);
    res.status(500).send('Error updating comment');
  }
});

// Route pour supprimer un avis
router.post('/avis/delete/:id', ensureAdmin, async (req, res) => {
  try {
    const avis = await db.Comment.findByPk(req.params.id);
    await avis.destroy();
    res.redirect('/admin/avis');
  } catch (err) {
    console.error('Error deleting comment:', err);
    res.status(500).send('Error deleting comment');
  }
});



// Utilisateurs -----------------------------------------------

// Route pour afficher tous les utilisateurs
router.get('/users', ensureAdmin, async (req, res) => {
  try {
    const users = await db.User.findAll();
    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Gestion des Utilisateurs', partial: 'users', users, themes, destinations });
  } catch (err) {
    console.error('Error fetching users:', err);
    res.status(500).send('Error fetching users');
  }
});

// Route pour afficher le formulaire de création d'un nouvel utilisateur
router.get('/users/new', ensureAdmin, async (req, res) => {
  const { themes, destinations } = await getCommonData();
  res.render('admin/dashboard', { title: 'Ajouter un nouvel utilisateur', partial: 'newUser', themes, destinations });
});

// Route pour créer un nouvel utilisateur
router.post('/users/new', ensureAdmin, async (req, res) => {
  try {
    await db.User.create(req.body);
    res.redirect('/admin/users');
  } catch (err) {
    console.error('Error creating user:', err);
    res.status(500).send('Error creating user');
  }
});

// Route pour afficher le formulaire d'édition d'un utilisateur
router.get('/users/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const user = await db.User.findByPk(req.params.id);
    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Modifier l\'utilisateur', partial: 'editUser', user, themes, destinations });
  } catch (err) {
    console.error('Error fetching user:', err);
    res.status(500).send('Error fetching user');
  }
});

// Route pour mettre à jour un utilisateur
router.post('/users/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const { username, email, role, firstName, lastName, phone, address } = req.body;
    const user = await db.User.findByPk(req.params.id);

    // Vérifier si le rôle change à 'hebergeur'
    if (role === 'hebergeur' && user.role !== 'hebergeur') {
      const existingOwner = await db.Owner.findOne({ where: { UserId: user.id } });
      if (!existingOwner) {
        await db.Owner.create({
          name: username,
          contact: email,
          UserId: user.id
        });
      }
    }

    await user.update({
      username,
      email,
      role,
      firstName,
      lastName,
      phone,
      address
    });

    res.redirect('/admin/users');
  } catch (err) {
    console.error('Error updating user:', err);
    res.status(500).send('Error updating user');
  }
});


// Messages -----------------------------------------------

// Route pour afficher les messages de contact
router.get('/messages', ensureAdminOrHebergeur, async (req, res) => {
  try {
    let messages;

    if (req.user.role === 'admin') {
      // L'admin voit tous les messages
      messages = await db.Message.findAll({
        include: [{ model: db.Housing }]
      });
    } else if (req.user.role === 'hebergeur') {
      // L'hébergeur ne voit que les messages liés à ses hébergements
      const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });
      if (!owner) {
        return res.status(403).send('Accès refusé');
      }

      messages = await db.Message.findAll({
        include: [{ model: db.Housing, where: { ownerId: owner.id } }]
      });
    }

    const { themes, destinations } = await getCommonData();
    res.render('admin/dashboard', { title: 'Messages reçus', partial: 'messages', messages, themes, destinations });
  } catch (err) {
    console.error('Error fetching messages:', err);
    res.status(500).send('Error fetching messages');
  }
});

// Route pour afficher les détails d'un message
router.get('/messages/:id', ensureAdminOrHebergeur, async (req, res) => {
  try {
    const message = await db.Message.findByPk(req.params.id, {
      include: [{ model: db.Housing }]
    });

    if (!message) {
      return res.status(404).send('Message not found');
    }

    // Vérification de l'accès pour les hébergeurs
    if (req.user.role === 'hebergeur' && message.Housing && message.Housing.ownerId !== req.user.id) {
      return res.status(403).send('Accès refusé');
    }

    const themes = await db.Theme.findAll();
    const destinations = await db.Destination.findAll();
    res.render('admin/dashboard', { title: 'Détail du Message', partial: 'messageDetail', message, themes, destinations });
  } catch (err) {
    console.error('Error fetching message detail:', err);
    res.status(500).send('Server Error');
  }
});


// Route pour afficher les messages de l'hébergeur connecté
router.get('/hebergeur/messages', ensureAuthenticated, async (req, res) => {
  try {
      const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });
      if (!owner) {
          return res.status(403).send('Accès refusé');
      }

      const messages = await db.Message.findAll({
          include: [{
              model: db.Housing,
              where: { ownerId: owner.id }
          }]
      });

      res.render('admin/dashboard', { title: 'Mes Messages', partial: 'messages', messages });
  } catch (err) {
      console.error('Error fetching messages:', err);
      res.status(500).send('Error fetching messages');
  }
});


// Bookings -----------------------------------------------

// Route pour afficher les réservations
router.get('/bookings', ensureAdminOrHebergeur, async (req, res) => {
    try {
        let bookings;
        let housings;

        if (req.user.role === 'admin') {
            bookings = await db.Booking.findAll({
                include: [
                    { model: db.Housing, as: 'housing' },
                    { model: db.User, as: 'user' }
                ]
            });
            housings = await db.Housing.findAll();
        } else if (req.user.role === 'hebergeur') {
            const owner = await db.Owner.findOne({ where: { UserId: req.user.id } });
            if (!owner) {
                return res.status(403).send('Accès refusé');
            }

            bookings = await db.Booking.findAll({
                include: [
                    { model: db.Housing, as: 'housing', where: { ownerId: owner.id } },
                    { model: db.User, as: 'user' }
                ]
            });
            housings = await db.Housing.findAll({ where: { ownerId: owner.id } });
        }

        res.render('admin/dashboard', { 
            title: 'Gestion des Réservations',
            partial: 'bookings',
            bookings,
            housings
        });
    } catch (err) {
        console.error('Error fetching bookings:', err);
        res.status(500).send('Erreur lors de la récupération des réservations.');
    }
});

// Route pour modifier le statut d'une réservation
router.post('/bookings/:id/status', ensureAdminOrHebergeur, async (req, res) => {
    try {
        const booking = await db.Booking.findByPk(req.params.id);

        if (!booking) {
            return res.status(404).send('Réservation non trouvée');
        }

        booking.status = req.body.status;
        await booking.save();

        res.status(200).send('Statut mis à jour avec succès');
    } catch (err) {
        console.error('Error updating booking status:', err);
        res.status(500).send('Erreur lors de la mise à jour de la réservation.');
    }
});

// Route pour récupérer les événements de réservation d'un hébergement
router.get('/bookings/events/:housingId', ensureAdminOrHebergeur, async (req, res) => {
    try {
        const bookings = await db.Booking.findAll({
            where: { HousingId: req.params.housingId },
            attributes: ['id', 'startDate', 'endDate', 'status']
        });

        const events = bookings.map(booking => ({
            id: booking.id,
            title: booking.status === 'blocked' ? 'Bloqué' : 'Réservé',
            start: booking.startDate.toISOString().split('T')[0],
            end: booking.endDate.toISOString().split('T')[0],
            color: booking.status === 'blocked' ? 'gray' : 'red',
        }));

        res.status(200).json(events); // Renvoi des événements correctement formatés en JSON
    } catch (err) {
        console.error('Error fetching booking events:', err);
        res.status(500).json({ message: 'Erreur serveur' });
    }
});

// Route pour bloquer une date spécifique pour un hébergement
router.post('/bookings/block', ensureAdminOrHebergeur, async (req, res) => {
    try {
        const { startDate, endDate, housingId } = req.body;

        await db.Booking.create({
            startDate: startDate,
            endDate: endDate,
            status: 'blocked',
            HousingId: housingId
        });

        res.status(200).json({ message: 'Date bloquée avec succès' }); // Retourne un JSON au lieu d'un texte brut
    } catch (err) {
        console.error('Error blocking date:', err);
        res.status(500).json({ message: 'Erreur lors du blocage du jour' });
    }
});

// Route pour annuler une réservation spécifique pour un hébergement
router.post('/bookings/cancel', ensureAdminOrHebergeur, async (req, res) => {
  try {
      const { startDate, endDate, housingId } = req.body;

      console.log('Start Date:', startDate);
      console.log('End Date:', endDate);
      console.log('Housing ID:', housingId);

      const { Op } = require('sequelize');

      const booking = await db.Booking.findOne({
          where: {
              startDate: {
                  [Op.gte]: new Date(startDate).setHours(0, 0, 0, 0)
              },
              endDate: {
                  [Op.lte]: new Date(endDate).setHours(23, 59, 59, 999)
              },
              HousingId: housingId,
              status: { [Op.ne]: 'cancelled' }
          }
      });

      if (booking) {
          booking.status = 'cancelled';
          await booking.save();
          res.status(200).json({ message: 'Réservation annulée avec succès' });
      } else {
          console.log('Réservation non trouvée');
          res.status(404).json({ message: 'Réservation non trouvée' });
      }
  } catch (err) {
      console.error('Error cancelling booking:', err);
      res.status(500).json({ message: 'Erreur lors de l\'annulation de la réservation' });
  }
});

module.exports = router;


-------------------------------
- routes/auth.js : 
// routes/auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const passport = require('passport');
const { User } = require('../models');
const upload = require('../config/multer');

// Route de login
router.get('/login', (req, res) => {
  res.render('login', { error: req.flash('error') });
});

router.post('/login', passport.authenticate('local', {
  failureRedirect: '/login',
  failureFlash: true
}), (req, res) => {
  if (req.session.returnTo) {
    const returnTo = req.session.returnTo;
    delete req.session.returnTo;
    res.redirect(returnTo);
  } else {
    res.redirect('/profile');
  }
});

// Route de registre
router.get('/register', (req, res) => {
  res.render('register', { error: null });
});

router.post('/register', upload.single('photo'), async (req, res) => {
  const { username, email, password, firstName, lastName, phone, address, role } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await User.create({
      username,
      email,
      password: hashedPassword,
      firstName,
      lastName,
      phone,
      address,
      photo: req.file ? req.file.path : null,
      role // Enregistre le rôle choisi (hébergeur ou acheteur)
    });

    // Si l'utilisateur s'inscrit en tant qu'hébergeur, créer une entrée dans Owners
    if (role === 'hebergeur') {
      await db.Owner.create({
        name: user.username,
        contact: user.email,
        UserId: user.id
      });
    }

    req.flash('success', 'Registration successful! Please log in.');
    res.redirect('/login');
  } catch (error) {
    console.error('Error registering user:', error);
    res.render('register', { error: 'An error occurred during registration. Please try again.' });
  }
});


// Route de profile
router.get('/profile', async (req, res) => {
  if (!req.isAuthenticated()) {
    req.session.returnTo = req.originalUrl;  // Sauvegarder l'URL de la page d'origine
    return res.redirect('/login');
  }
  try {
    const user = await User.findByPk(req.user.id);
    res.render('profile', { user, error: req.flash('error'), success: req.flash('success') });
  } catch (error) {
    console.error('Error fetching profile:', error);
    res.render('profile', { user: null, error: 'An error occurred while fetching your profile. Please try again.', success: null });
  }
});

router.post('/profile', upload.single('photo'), async (req, res) => {
  try {
    const { firstName, lastName, email, phone, address, password, confirmPassword } = req.body;

    if (password && password !== confirmPassword) {
      req.flash('error', 'Passwords do not match.');
      return res.redirect('/profile');
    }

    const user = await User.findByPk(req.user.id);

    if (req.file) {
      user.photo = req.file.path;
    }
    
    user.firstName = firstName;
    user.lastName = lastName;
    user.email = email;
    user.phone = phone;
    user.address = address;

    if (password) {
      user.password = await bcrypt.hash(password, 10);
    }

    await user.save();
    req.flash('success', 'Profile updated successfully.');
    res.redirect('/profile');
  } catch (error) {
    console.error('Error updating profile:', error);
    req.flash('error', 'An error occurred while updating your profile. Please try again.');
    res.redirect('/profile');
  }
});

router.post('/profile/delete', async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id);
    await user.destroy();
    req.logout(() => {
      req.flash('success', 'Your account has been deleted.');
      res.redirect('/');
    });
  } catch (error) {
    console.error('Error deleting profile:', error);
    req.flash('error', 'An error occurred while deleting your profile. Please try again.');
    res.redirect('/profile');
  }
});

// Route de déconnexion
router.get('/logout', (req, res) => {
  req.logout(() => {
    req.flash('success', 'You are logged out');
    res.redirect('/');
  });
});

module.exports = router;


-------------------------------
- routes/blog.js :
const express = require('express');
const router = express.Router();
const db = require('../models');

// Route pour la page du blog
router.get('/', async (req, res) => {
  try {
    const articles = await db.Blog.findAll({ where: { publishedAt: { [db.Sequelize.Op.lte]: new Date() } } });
    res.render('blog', { articles });
  } catch (err) {
    console.error('Error fetching blog articles:', err);
    res.status(500).send('Error fetching blog articles');
  }
});

// Route pour afficher un seul article
router.get('/:url', async (req, res) => {
  try {
    const article = await db.Blog.findOne({ where: { url: req.params.url } });
    if (!article) {
      return res.status(404).send('Article not found');
    }
    res.render('single-article', { article });
  } catch (err) {
    console.error('Error fetching blog article:', err);
    res.status(500).send('Error fetching blog article');
  }
});

module.exports = router;

-------------------------------
- routes/bookings.js :
// routes/bookings.js
const express = require("express");
const router = express.Router();
const db = require("../models");
const { ensureAuthenticated } = require("../middleware/auth");
const { Op } = require("sequelize");
const moment = require("moment");
const paypal = require("@paypal/checkout-server-sdk");

// Initialisation du client PayPal
function paypalClient() {
  return new paypal.core.PayPalHttpClient(
    new paypal.core.SandboxEnvironment(
      process.env.PAYPAL_CLIENT_ID,
      process.env.PAYPAL_CLIENT_SECRET
    )
  );
}
1;

// Route pour afficher les réservations de l'utilisateur
router.get("/", ensureAuthenticated, async (req, res) => {
  try {
    const bookings = await db.Booking.findAll({
      where: { UserId: req.user.id },
      include: [
        {
          model: db.Housing,
          as: "housing",
        },
      ],
    });

    // Trier les réservations par statut
    const ongoingBookings = bookings.filter(
      (booking) =>
        booking.status === "pending" &&
        moment(booking.endDate).isAfter(moment())
    );
    const pastBookings = bookings.filter(
      (booking) =>
        booking.status === "pending" &&
        moment(booking.endDate).isBefore(moment())
    );
    const cancelledBookings = bookings.filter(
      (booking) => booking.status === "cancelled"
    );

    res.render("bookings", {
      ongoingBookings,
      pastBookings,
      cancelledBookings,
    });
  } catch (err) {
    console.error("Error fetching bookings:", err);
    res.status(500).send("Server Error");
  }
});

// Route pour annuler une réservation
router.post("/cancel/:id", ensureAuthenticated, async (req, res) => {
  try {
    const booking = await db.Booking.findOne({
      where: {
        id: req.params.id,
        UserId: req.user.id,
      },
    });

    if (!booking) {
      return res.status(404).send("Reservation not found");
    }

    if (moment(booking.startDate).isBefore(moment())) {
      return res
        .status(400)
        .send("Cannot cancel a reservation that has already started or passed");
    }

    booking.status = "cancelled";
    await booking.save();

    res.redirect("/bookings");
  } catch (err) {
    console.error("Error cancelling booking:", err);
    res.status(500).send("Server Error");
  }
});

// Route pour afficher le formulaire d'ajout de réservation
router.get("/add", ensureAuthenticated, async (req, res) => {
  try {
    const housings = await db.Housing.findAll();
    res.render("add-booking", { housings });
  } catch (err) {
    console.error("Error fetching housings:", err);
    res.status(500).send("Server Error");
  }
});

// Route pour gérer l'ajout de réservation
router.post("/add", ensureAuthenticated, async (req, res) => {
  const { housingId, startDate, endDate } = req.body;

  // Validation des dates
  if (moment(startDate).isAfter(endDate)) {
    return res
      .status(400)
      .send("La date de fin doit être après la date de début");
  }

  try {
    // Récupération du logement dans la base de données
    const housing = await db.Housing.findByPk(housingId);
    if (!housing) {
      return res.status(404).send("Housing not found");
    }

    // Vérification de la disponibilité de la période sélectionnée
    const existingBooking = await db.Booking.findOne({
      where: {
        HousingId: housingId,
        [Op.or]: [
          {
            startDate: {
              [Op.between]: [startDate, endDate],
            },
          },
          {
            endDate: {
              [Op.between]: [startDate, endDate],
            },
          },
          {
            [Op.and]: [
              {
                startDate: {
                  [Op.lte]: startDate,
                },
              },
              {
                endDate: {
                  [Op.gte]: endDate,
                },
              },
            ],
          },
        ],
      },
    });

    if (existingBooking) {
      return res.status(409).send("Cette période est déjà réservée.");
    }

    // Calcul du nombre de jours entre la date de début et la date de fin
    const start = moment(startDate);
    const end = moment(endDate);
    const numberOfDays = end.diff(start, "days") + 1; // +1 pour inclure la date de fin

    // Calcul du prix total
    const totalPrice = (housing.price * numberOfDays).toFixed(2);

    // Création de la requête de commande PayPal
    const request = new paypal.orders.OrdersCreateRequest();
    request.prefer("return=representation");
    request.requestBody({
      intent: "CAPTURE",
      purchase_units: [
        {
          amount: {
            currency_code: "EUR",
            value: totalPrice,
          },
        },
      ],
      application_context: {
        return_url: "http://localhost:3000/bookings/confirm",
        cancel_url: "http://localhost:3000/bookings/cancel",
      },
    });

    // Exécution de la commande PayPal
    const order = await paypalClient().execute(request);

    // Enregistrement des données de réservation dans la session
    req.session.bookingData = {
      UserId: req.user.id,
      HousingId: housingId,
      startDate,
      endDate,
      status: "pending",
      orderId: order.result.id,
      totalPrice, // Ajouter le prix total pour la réservation
    };

    // Récupération de l'URL d'approbation PayPal
    const approvalUrl = order.result.links.find(
      (link) => link.rel === "approve"
    ).href;
    res.redirect(approvalUrl);
  } catch (err) {
    console.error("Error creating booking:", err);
    res.status(500).send("Server Error");
  }
});

router.get("/confirm", ensureAuthenticated, async (req, res) => {
  const { token } = req.query;

  if (!req.session.bookingData) {
    return res.status(400).send("Aucune réservation en cours");
  }

  try {
    const request = new paypal.orders.OrdersCaptureRequest(token);
    request.requestBody({});
    const capture = await paypalClient().execute(request);

    if (capture.result.status === "COMPLETED") {
      const bookingData = req.session.bookingData;
      await db.Booking.create(bookingData);

      req.session.bookingData = null;
      res.redirect("/bookings");
    } else {
      res.status(400).send("Payment not completed");
    }
  } catch (err) {
    console.error("Error capturing payment:", err);
    res.status(500).send("Server Error");
  }
});

router.get("/cancel", ensureAuthenticated, (req, res) => {
  req.session.bookingData = null;
  res.redirect("/bookings");
});

module.exports = router;


-------------------------------
- routes/comments.js :
// routes/comments.js
const express = require('express');
const router = express.Router();
const { Comment, Housing, Booking, User } = require('../models');
const upload = require('../config/multer');
const { ensureAuthenticated } = require('../middleware/auth');

// Ajouter un commentaire
router.post('/:housingId/comments', ensureAuthenticated, upload.single('photo'), async (req, res) => {
  try {
    const { content, rating } = req.body;
    const { housingId } = req.params;

    // Vérifier que l'utilisateur a réservé l'hébergement
    const booking = await Booking.findOne({
      where: { HousingId: housingId, UserId: req.user.id }
    });

    if (!booking) {
      return res.status(403).send('Vous devez réserver cet hébergement pour laisser un commentaire.');
    }

    await Comment.create({
      content,
      rating,
      photo: req.file ? req.file.path : null,
      UserId: req.user.id,
      HousingId: housingId
    });

    res.redirect(`/hebergements/${housingId}`);
  } catch (err) {
    console.error('Error adding comment:', err);
    res.status(500).send('Server Error');
  }
});

// Modifier un commentaire
router.post('/:housingId/comments/:id/edit', ensureAuthenticated, upload.single('photo'), async (req, res) => {
  try {
    const comment = await Comment.findByPk(req.params.id);
    if (comment.UserId !== req.user.id) {
      return res.status(403).send('Vous ne pouvez modifier que vos propres commentaires.');
    }

    const { content, rating } = req.body;
    if (req.file) {
      comment.photo = req.file.path;
    }
    comment.content = content;
    comment.rating = rating;
    await comment.save();

    res.redirect(`/hebergements/${req.params.housingId}`);
  } catch (err) {
    console.error('Error editing comment:', err);
    res.status(500).send('Server Error');
  }
});

// Supprimer un commentaire
router.post('/:housingId/comments/:id/delete', ensureAuthenticated, async (req, res) => {
  try {
    const comment = await Comment.findByPk(req.params.id);
    if (comment.UserId !== req.user.id) {
      return res.status(403).send('Vous ne pouvez supprimer que vos propres commentaires.');
    }
    await comment.destroy();
    res.redirect(`/hebergements/${req.params.housingId}`);
  } catch (err) {
    console.error('Error deleting comment:', err);
    res.status(500).send('Server Error');
  }
});

module.exports = router;


-------------------------------
- routes/contact.js :
const express = require('express');
const router = express.Router();
const db = require('../models');

// Route pour afficher la page de contact
router.get('/', (req, res) => {
    res.render('contact', { success: req.query.success });
});

// Route pour gérer l'envoi du formulaire de contact
router.post('/send', async (req, res) => {
    const { name, email, phone, content, housingId } = req.body;
    try {
        await db.Message.create({
            name,
            email,
            phone,
            content,
            housingId: housingId || null  // Ajoute l'ID de l'hébergement si disponible
        });
        res.redirect('/contact?success=true');
    } catch (err) {
        console.error('Error saving message:', err);
        res.status(500).send('Server Error');
    }
});

module.exports = router;


-------------------------------
- routes/hebergements.js :
// routes/hebergements.js
const express = require('express');
const router = express.Router();
const db = require('../models');
const { ensureAuthenticated, ensureAdmin } = require('../middleware/auth');
const { Housing, Comment, User, Theme, Owner, Destination, Equipment, Photo, Message } = require('../models');
const upload = require('../config/multer');

// Route pour afficher tous les hébergements
router.get('/', async (req, res) => {
  try {
    const { sortBy, theme } = req.query;
    let queryOptions = {
      include: [
        {
          model: Theme
        },
        {
          model: Photo,
          as: 'Photos'
        }
      ]
    };

    if (theme) {
      queryOptions.where = { themeId: theme };
    }

    if (sortBy) {
      switch (sortBy) {
        case 'recent':
          queryOptions.order = [['createdAt', 'DESC']];
          break;
        case 'popular':
          queryOptions.order = [['rating', 'DESC']];
          break;
        case 'expensive':
          queryOptions.order = [['price', 'DESC']];
          break;
        case 'cheap':
          queryOptions.order = [['price', 'ASC']];
          break;
        default:
          break;
      }
    }

    const housings = await Housing.findAll(queryOptions);
    const themes = await Theme.findAll();
    res.render('hebergements', { housings, themes, user: req.user });
  } catch (err) {
    console.error('Error fetching housings:', err);
    res.status(500).send('Server Error');
  }
});

// Route pour afficher le formulaire d'ajout d'un nouvel hébergement
router.get('/add', ensureAuthenticated, async (req, res) => {
  try {
    const themes = await Theme.findAll();
    const destinations = await Destination.findAll();
    const simpleEquipments = await Equipment.findAll({ where: { type: 'simple' } });
    const premiumEquipments = await Equipment.findAll({ where: { type: 'premium' } });
    res.render('add-hebergement', { themes, destinations, simpleEquipments, premiumEquipments });
  } catch (error) {
    console.error('Error fetching themes and destinations:', error);
    res.status(500).send('Server Error');
  }
});

// Route pour ajouter un nouvel hébergement
router.post('/add', ensureAuthenticated, upload.array('images', 5), async (req, res) => {
  try {
    const { title, description, type, price, capacity, themeId, destinationId, simpleEquipments = [], premiumEquipments = [] } = req.body;

    let owner = await Owner.findOne({ where: { UserId: req.user.id } });
    if (!owner) {
      owner = await Owner.create({ UserId: req.user.id, name: req.user.username, contact: req.user.email });
    }

    const housing = await Housing.create({
      title,
      description,
      type,
      price,
      capacity,
      themeId,
      destinationId,
      ownerId: owner.id,
    });

    if (req.files) {
      const photos = req.files.map(file => ({
        path: file.path,
        housingId: housing.id
      }));
      await Photo.bulkCreate(photos);
    }

    const allEquipments = [].concat(simpleEquipments, premiumEquipments);
    
    if (allEquipments.length > 0) {
      await housing.addEquipment(allEquipments);
    }

    res.redirect('/hebergements');
  } catch (error) {
    console.error('Error adding housing:', error);
    res.status(500).send('Server Error');
  }
});

// Route pour afficher un hébergement spécifique
router.get('/:id', async (req, res) => {
  try {
    console.log('Fetching housing with ID:', req.params.id);
    
    const housing = await Housing.findByPk(req.params.id, {
      include: [
        { model: Comment, include: [{ model: User }] },
        { model: Destination },
        { model: Theme },
        { 
          model: Owner,
          as: 'Owner',  // Spécification de l'alias
          include: [
            {
              model: User,
              as: 'User',  // Spécification de l'alias ici aussi
              attributes: ['id', 'firstName', 'lastName']
            }
          ]
        },
        { model: Photo, as: 'Photos' },
        { model: Equipment, as: 'Equipments' }
      ]
    });

    if (!housing) {
      return res.status(404).send('Housing not found');
    }

    // Passez l'ID du propriétaire à la vue en utilisant l'alias 'Owner.User'
    const receiver = housing.Owner ? housing.Owner.User : null;

    res.render('single-hebergement', { housing, receiver, user: req.user });
  } catch (err) {
    console.error('Error fetching housing:', err);
    res.status(500).send('Server Error');
  }
});

// Nouvelle route pour gérer l'envoi du message depuis un hébergement
router.post('/sendMessage', async (req, res) => {
  try {
    const { name, email, phone, content, housingId } = req.body;

    // Créer un nouveau message lié à un hébergement spécifique
    await Message.create({
      name,
      email,
      phone,
      content,
      housingId: housingId // Associe le message à l'hébergement
    });

    // Rediriger l'utilisateur vers la page de l'hébergement après l'envoi du message
    res.redirect(`/hebergements/${housingId}`);
  } catch (err) {
    console.error('Erreur lors de l\'envoi du message:', err);
    res.status(500).json({ message: 'Erreur lors de l\'envoi du message.' });
  }
});


// Route pour afficher les hébergements par thème
router.get('/theme/:themeId', async (req, res) => {
  try {
    const housings = await Housing.findAll({
      where: { themeId: req.params.themeId },
      include: [{ model: Theme, as: 'theme' }],
    });
    res.render('hebergements', { housings });
  } catch (error) {
    console.error('Error fetching housings by theme:', error);
    res.status(500).send('Server Error');
  }
});

// Route pour mettre à jour un hébergement
router.post('/hebergements/edit/:id', ensureAdmin, upload.array('images', 5), async (req, res) => {
  try {
    const { title, description, type, price, capacity, themeId, destinationId, simpleEquipments, premiumEquipments } = req.body;

    const hebergement = await Housing.findByPk(req.params.id);
    await hebergement.update({
      title,
      description,
      type,
      price,
      capacity,
      themeId,
      destinationId
    });

    if (req.files) {
      const photos = req.files.map(file => ({
        path: file.path,
        housingId: hebergement.id
      }));
      await Photo.bulkCreate(photos);
    }

    if (simpleEquipments) {
      await hebergement.setEquipments(simpleEquipments);
    }

    if (premiumEquipments) {
      await hebergement.setEquipments(premiumEquipments);
    }

    res.redirect('/admin/hebergements');
  } catch (err) {
    console.error('Error updating hebergement:', err);
    res.status(500).send('Error updating hebergement');
  }
});

module.exports = router;


-------------------------------
- routes/destinations.js :
// routes/destinations.js
const express = require('express');
const router = express.Router();
const db = require('../models');
const multer = require('multer');
const path = require('path');
const { ensureAuthenticated } = require('../middleware/auth');

// Configuration de multer pour le stockage des fichiers
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});

const upload = multer({ storage: storage });

// Route pour afficher le formulaire d'ajout de destination
router.get('/add', ensureAuthenticated, (req, res) => {
  res.render('add-destination');
});

// Route pour gérer l'ajout de destination
router.post('/add', ensureAuthenticated, upload.single('image'), async (req, res) => {
  const { name, location, description, categories } = req.body;
  const image = req.file ? req.file.path : null;
  try {
    await db.Destination.create({
      name,
      location,
      description,
      categories,
      image
    });
    res.redirect('/destinations');
  } catch (err) {
    console.error('Error adding destination:', err);
    res.status(500).send('Server Error');
  }
});

// Route pour afficher toutes les destinations
router.get('/', async (req, res) => {
  try {
    const destinations = await db.Destination.findAll();
    res.render('destinations', { destinations });
  } catch (err) {
    console.error('Error fetching destinations:', err);
    res.status(500).send('Server Error');
  }
});

// Route pour afficher une destination individuelle avec les hébergements associés
router.get('/:id', async (req, res) => {
  try {
    const destination = await db.Destination.findByPk(req.params.id, {
      include: [{ model: db.Housing, include: [{ model: db.Theme }, { model: db.Photo, as: 'Photos' }] }] // Spécifiez l'alias ici
    });
    if (!destination) {
      return res.status(404).send('Destination not found');
    }
    const themes = await db.Theme.findAll();
    res.render('single-destination', { destination, themes });
  } catch (err) {
    console.error('Error fetching destination:', err);
    res.status(500).send('Server Error');
  }
});

module.exports = router;


-------------------------------
- routes/home.js :
// routes/home.js
const express = require('express');
const router = express.Router();

// Route pour la page d'accueil
router.get('/', (req, res) => {
  res.render('index');
});

module.exports = router;


-------------------------------
- routes/hote.js :
const express = require('express');
const router = express.Router();

// Route pour la page "Devenez Hôte"
router.get('/', (req, res) => {
  res.render('hote');
});

module.exports = router;


-------------------------------
- routes/pages.js :
const express = require('express');
const router = express.Router();
const { Page } = require('../models');
const { ensureAdmin } = require('../middleware/auth');
const upload = require('../config/multer');

// Afficher toutes les pages
router.get('/', ensureAdmin, async (req, res) => {
    try {
      const pages = await Page.findAll();
      res.render('admin/pages/index', { pages });
    } catch (err) {
      console.error('Error fetching pages:', err);
      res.status(500).send('Server Error');
    }
});

// Afficher le formulaire de création de page
router.get('/add', ensureAdmin, (req, res) => {
  res.render('admin/pages/add');
});

// Ajouter une nouvelle page
router.post('/add', ensureAdmin, upload.single('photo'), async (req, res) => {
  try {
    const { title, url, content, seoTitle, seoDescription, status } = req.body;
    const photo = req.file ? req.file.filename : null;
    await Page.create({ title, url, content, seoTitle, seoDescription, status, photo });
    res.redirect('/admin/pages');
  } catch (err) {
    console.error('Error adding page:', err);
    res.status(500).send('Server Error');
  }
});

// Afficher le formulaire d'édition de page
router.get('/edit/:id', ensureAdmin, async (req, res) => {
  try {
    const page = await Page.findByPk(req.params.id);
    res.render('admin/pages/edit', { page });
  } catch (err) {
    console.error('Error fetching page:', err);
    res.status(500).send('Server Error');
  }
});

// Modifier une page
router.post('/edit/:id', ensureAdmin, upload.single('photo'), async (req, res) => {
  try {
    const { title, url, content, seoTitle, seoDescription, status } = req.body;
    const photo = req.file ? req.file.filename : req.body.existingPhoto;
    await Page.update({ title, url, content, seoTitle, seoDescription, status, photo }, {
      where: { id: req.params.id }
    });
    res.redirect('/admin/pages');
  } catch (err) {
    console.error('Error updating page:', err);
    res.status(500).send('Server Error');
  }
});

// Supprimer une page
router.post('/delete/:id', ensureAdmin, async (req, res) => {
  try {
    await Page.destroy({
      where: { id: req.params.id }
    });
    res.redirect('/admin/pages');
  } catch (err) {
    console.error('Error deleting page:', err);
    res.status(500).send('Server Error');
  }
});

// Route pour afficher une page spécifique par son URL
router.get('/:url', async (req, res) => {
  try {
    const page = await Page.findOne({ where: { url: req.params.url } });
    if (!page) {
      return res.status(404).send('Page non trouvée');
    }
    res.render('single-page', { page });
  } catch (err) {
    console.error('Error fetching page:', err);
    res.status(500).send('Erreur serveur');
  }
});

module.exports = router;


-------------------------------
- routes/profile.js :
// routes/profile.js
const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const { ensureAuthenticated } = require('../middleware/auth');
const db = require('../models');

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage: storage });

router.get('/profile', ensureAuthenticated, async (req, res) => {
  res.render('profile', { user: req.user });
});

router.post('/profile', ensureAuthenticated, upload.single('photo'), async (req, res) => {
  const { firstName, lastName, email, phone, address } = req.body;
  const photo = req.file ? req.file.path : req.user.photo;
  try {
    await db.User.update(
      { firstName, lastName, email, phone, address, photo },
      { where: { id: req.user.id } }
    );
    res.redirect('/profile');
  } catch (e) {
    console.log(e);
    res.redirect('/profile');
  }
});

module.exports = router;


-------------------------------
- routes/themes.js :
// routes/themes.js
const express = require('express');
const router = express.Router();
const db = require('../models');
const { Sequelize } = require('sequelize');
const Op = Sequelize.Op;

// Route pour afficher les thèmes
router.get('/', async (req, res) => {
  try {
    const themes = await db.Theme.findAll();
    res.render('themes', { themes });
  } catch (err) {
    console.error('Error fetching themes:', err);
    res.status(500).send('Server Error');
  }
});


// Route pour afficher les hébergements par thème avec tri
router.get('/:id/hebergements', async (req, res) => {
  try {
    const themeId = req.params.id;
    const sortBy = req.query.sortBy;

    let order;
    switch (sortBy) {
      case 'recent':
        order = [['createdAt', 'DESC']];
        break;
      case 'popular':
        order = [[db.sequelize.literal('(SELECT AVG(rating) FROM Comments WHERE Comments.HousingId = Housing.id)'), 'DESC']];
        break;
      case 'expensive':
        order = [['price', 'DESC']];
        break;
      case 'cheap':
        order = [['price', 'ASC']];
        break;
      default:
        order = [['createdAt', 'DESC']];
    }

    const housings = await db.Housing.findAll({
      where: { themeId: themeId },
      order: order,
      include: [
        { model: db.Comment },
        { model: db.Photo, as: 'Photos' } // Spécifiez l'alias ici
      ]
    });

    const theme = await db.Theme.findByPk(themeId);

    res.render('single-theme', { housings, theme });
  } catch (err) {
    console.error('Error fetching housings by theme:', err);
    res.status(500).send('Server Error');
  }
});

module.exports = router;



// views -------------------------------

- views/admin/partials/avis.ejs :
<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
              <h4 class="card-title">Gestion des Avis</h4>
              <p class="card-category">Ici, vous pouvez gérer tous les avis sur les hébergements.</p>
            </div>
            <div class="card-body">
              <div class="table-responsive">
                <table class="table">
                  <thead class="text-primary">
                    <th>ID</th>
                    <th>Utilisateur</th>
                    <th>Hébergement</th>
                    <th>Note</th>
                    <th>Contenu</th>
                    <th>Actions</th>
                  </thead>
                  <tbody>
                    <% avis.forEach(avi => { %>
                      <tr>
                        <td><%= avi.id %></td>
                        <td><%= avi.User.firstName %> <%= avi.User.lastName %></td>
                        <td>
                          <a href="/hebergements/<%= avi.Housing.id %>"><%= avi.Housing.title %></a> <!-- Lien vers la page spécifique de l'hébergement -->
                        </td>
                        <td><%= avi.rating %> / 5</td>
                        <td><%= avi.content.substring(0, 50) %>...</td>
                        <td>
                          <% if (userRole === 'admin') { %>
                            <a href="/admin/avis/edit/<%= avi.id %>" class="btn btn-warning btn-sm">Modifier</a>
                            <form action="/admin/avis/delete/<%= avi.id %>" method="POST" style="display:inline;">
                              <button type="submit" class="btn btn-danger btn-sm">Supprimer</button>
                            </form>
                          <% } %>
                        </td>
                      </tr>
                    <% }) %>
                  </tbody>                                                                      
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  

-------------------------------
- views/admin/partials/editAvis.ejs :
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Modifier l'avis</h4>
          </div>
          <div class="card-body">
            <form action="/admin/avis/edit/<%= avis.id %>" method="POST">
              <div class="form-group">
                <label for="content">Contenu</label>
                <textarea class="form-control" id="content" name="content" rows="5" required><%= avis.content %></textarea>
              </div>
              <div class="form-group">
                <label for="rating">Note</label>
                <input type="number" class="form-control" id="rating" name="rating" value="<%= avis.rating %>" min="1" max="5" required>
              </div>
              <button type="submit" class="btn btn-primary">Enregistrer les modifications</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



-------------------------------
- views/admin/partials/newAvis.ejs :
<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
              <h4 class="card-title">Ajouter un nouvel avis</h4>
            </div>
            <div class="card-body">
              <form action="/admin/avis/new" method="POST">
                <div class="form-group">
                  <label for="content">Contenu</label>
                  <textarea class="form-control" id="content" name="content" rows="5" required></textarea>
                </div>
                <div class="form-group">
                  <label for="rating">Note</label>
                  <input type="number" class="form-control" id="rating" name="rating" required>
                </div>
                <button type="submit" class="btn btn-primary">Ajouter</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  

-------------------------------
- views/admin/partials/blog.ejs :
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header card-header-primary">
                        <h4 class="card-title">Gestion des Articles de Blog</h4>
                        <p class="card-category">Gestion des articles de blog de votre site</p>
                    </div>
                    <div class="card-body">
                        <a href="/admin/blog/new" class="btn btn-primary mb-3">Ajouter un article</a>
                        <div class="table-responsive">
                            <table class="table">
                                <thead class="text-primary">
                                    <th>ID</th>
                                    <th>Titre</th>
                                    <th>URL</th>
                                    <th>Actions</th>
                                </thead>
                                <tbody>
                                    <% articles.forEach(article => { %>
                                    <tr>
                                        <td><%= article.id %></td>
                                        <td><%= article.title %></td>
                                        <td><a href="/blog/<%= article.url %>" target="_blank"><%= article.url %></a></td>
                                        <td>
                                            <a href="/admin/blog/edit/<%= article.id %>" class="btn btn-warning btn-sm">Modifier</a>
                                            <form action="/admin/blog/delete/<%= article.id %>" method="POST" style="display:inline;">
                                                <button type="submit" class="btn btn-danger btn-sm">Supprimer</button>
                                            </form>
                                        </td>
                                    </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                            <% if (articles.length === 0) { %>
                            <p class="text-center">Aucun article trouvé.</p>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


-------------------------------
- views/admin/partials/editArticle.ejs : 
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header card-header-primary">
                        <h4 class="card-title"><%= article ? 'Modifier l\'article' : 'Ajouter un nouvel article' %></h4>
                    </div>
                    <div class="card-body">
                        <form action="<%= article ? '/admin/blog/edit/' + article.id : '/admin/blog/new' %>" method="POST" enctype="multipart/form-data">
                            <div class="form-group">
                                <label for="title">Titre</label>
                                <input type="text" class="form-control" id="title" name="title" value="<%= article ? article.title : '' %>" required>
                            </div>
                            <div class="form-group">
                                <label for="url">URL</label>
                                <input type="text" class="form-control" id="url" name="url" value="<%= article ? article.url : '' %>" required>
                            </div>
                            <div class="form-group">
                                <label for="content">Contenu</label>
                                <textarea class="form-control" id="content" name="content" rows="10" required><%= article ? article.content : '' %></textarea>
                            </div>
                            <div class="form-group">
                                <label for="image">Photo</label>
                                <input type="file" class="form-control-file" id="image" name="image">
                            </div>
                            <div class="form-group">
                                <label for="categories">Catégories (séparées par des virgules)</label>
                                <input type="text" class="form-control" id="categories" name="categories" value="<%= article ? article.categories : '' %>">
                            </div>
                            <div class="form-group">
                                <label for="publishedAt">Date de publication</label>
                                <input type="datetime-local" class="form-control" id="publishedAt" name="publishedAt" value="<%= article ? new Date(article.publishedAt).toISOString().slice(0, 16) : '' %>">
                            </div>
                            <div class="form-group">
                                <h5>SEO</h5>
                                <label for="seoTitle">SEO Title</label>
                                <input type="text" class="form-control" id="seoTitle" name="seoTitle" value="<%= article ? article.seoTitle : '' %>">
                                <label for="seoDescription">Meta Description</label>
                                <textarea class="form-control" id="seoDescription" name="seoDescription" rows="3"><%= article ? article.seoDescription : '' %></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">Publier</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
  tinymce.init({
    selector: 'textarea#content',
    plugins: 'link image code',
    toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',
    setup: function (editor) {
      editor.on('change', function () {
        editor.save(); // Sync the content to the original textarea
      });
    }
  });

  // Ensure that TinyMCE content is properly submitted
  document.querySelector('form').addEventListener('submit', function(e) {
    // Ensure the editor content is updated in the textarea before submission
    tinymce.triggerSave();
  });
</script>


-------------------------------
- views/admin/partials/newArticle.ejs :
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header card-header-primary">
                        <h4 class="card-title"><%= article ? 'Modifier l\'article' : 'Ajouter un nouvel article' %></h4>
                    </div>
                    <div class="card-body">
                        <form action="<%= article ? '/admin/blog/edit/' + article.id : '/admin/blog/new' %>" method="POST" enctype="multipart/form-data">
                            <div class="form-group">
                                <label for="title">Titre</label>
                                <input type="text" class="form-control" id="title" name="title" value="<%= article ? article.title : '' %>" required>
                            </div>
                            <div class="form-group">
                                <label for="url">URL</label>
                                <input type="text" class="form-control" id="url" name="url" value="<%= article ? article.url : '' %>" required>
                            </div>
                            <div class="form-group">
                                <label for="content">Contenu</label>
                                <textarea class="form-control" id="content" name="content" rows="10" required><%= article ? article.content : '' %></textarea>
                            </div>
                            <div class="form-group">
                                <label for="image">Photo</label>
                                <input type="file" class="form-control-file" id="image" name="image">
                            </div>
                            <div class="form-group">
                                <label for="categories">Catégories (séparées par des virgules)</label>
                                <input type="text" class="form-control" id="categories" name="categories" value="<%= article ? article.categories : '' %>">
                            </div>
                            <div class="form-group">
                                <label for="publishedAt">Date de publication</label>
                                <input type="datetime-local" class="form-control" id="publishedAt" name="publishedAt" value="<%= article ? new Date(article.publishedAt).toISOString().slice(0, 16) : '' %>">
                            </div>
                            <div class="form-group">
                                <h5>SEO</h5>
                                <label for="seoTitle">SEO Title</label>
                                <input type="text" class="form-control" id="seoTitle" name="seoTitle" value="<%= article ? article.seoTitle : '' %>">
                                <label for="seoDescription">Meta Description</label>
                                <textarea class="form-control" id="seoDescription" name="seoDescription" rows="3"><%= article ? article.seoDescription : '' %></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">Publier</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
  tinymce.init({
    selector: 'textarea#content',
    plugins: 'link image code',
    toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',
    setup: function (editor) {
      editor.on('change', function () {
        editor.save(); // Sync the content to the original textarea
      });
    }
  });

  // Ensure that TinyMCE content is properly submitted
  document.querySelector('form').addEventListener('submit', function(e) {
    // Ensure the editor content is updated in the textarea before submission
    tinymce.triggerSave();
  });
</script>


-------------------------------
- views/admin/partials/bookings.ejs : 
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Réservations</title>
    <link href="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.8/index.global.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.8/index.global.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@fullcalendar/interaction@6.1.8/index.global.min.css" rel="stylesheet">
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        #calendar {
            margin-bottom: 20px;
        }
        .explanation {
            background-color: #f9f9f9;
            padding: 10px;
            margin-bottom: 20px;
            border-radius: 5px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            text-align: center;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Gestion des Réservations</h2>

        <div class="explanation">
            <p>Bienvenue dans la section de gestion des réservations. Vous pouvez utiliser le calendrier ci-dessous pour bloquer des dates, réserver des créneaux ou annuler des réservations existantes.</p>
        </div>

        <div class="form-group">
            <label for="housingSelect">Sélectionnez un hébergement :</label>
            <select id="housingSelect" class="form-control">
                <% housings.forEach(housing => { %>
                    <option value="<%= housing.id %>"><%= housing.title %></option>
                <% }) %>
            </select>
        </div>

        <div id="calendar"></div>

        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Hébergement</th>
                        <th>Date de début</th>
                        <th>Date de fin</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% 
                        let allBookings = bookings.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));

                        allBookings.forEach(booking => { %>
                        <tr>
                            <td><%= booking.id %></td>
                            <td><%= booking.housing.title %></td>
                            <td><%= new Date(booking.startDate).toLocaleDateString('fr-FR') %></td>
                            <td><%= new Date(booking.endDate).toLocaleDateString('fr-FR') %></td>
                            <td><%= booking.status %></td>
                            <td>
                                <% if (booking.status === 'pending') { %>
                                    <button class="btn btn-success" onclick="updateBookingStatus(<%= booking.id %>, 'confirmed')">Confirmer</button>
                                    <button class="btn btn-danger" onclick="updateBookingStatus(<%= booking.id %>, 'cancelled')">Annuler</button>
                                <% } else if (booking.status === 'confirmed') { %>
                                    <button class="btn btn-warning" onclick="updateBookingStatus(<%= booking.id %>, 'pending')">Revenir en attente</button>
                                <% } else if (booking.status === 'blocked') { %>
                                    <button class="btn btn-secondary" onclick="updateBookingStatus(<%= booking.id %>, 'pending')">Débloquer</button>
                                <% } else if (booking.status === 'cancelled') { %>
                                    <span class="badge bg-danger">Annulée</span>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.8/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.8/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/interaction@6.1.8/index.global.min.js"></script>

    <script>
document.addEventListener('DOMContentLoaded', function() {
    var housingSelect = document.getElementById('housingSelect');
    var calendarEl = document.getElementById('calendar');

    if (!housingSelect || !calendarEl) {
        console.error("Élément manquant dans le DOM.");
        return;
    }

    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        selectable: true,
        selectOverlap: false,
        events: function(fetchInfo, successCallback, failureCallback) {
            var housingId = housingSelect.value;

            fetch(`/admin/bookings/events/${housingId}`)
                .then(response => response.json())
                .then(events => {
                    const today = new Date().toISOString().split('T')[0];
                    events.forEach(event => {
                        if (event.end < today) {
                            event.color = 'gray';
                            event.title = 'Passé';
                        }
                    });
                    successCallback(events);
                })
                .catch(error => {
                    console.error("Erreur lors de la récupération des événements:", error);
                    failureCallback(error);
                });
        },
        select: function(info) {
            // Ouverture de la modal pour réserver ou bloquer une date
            openModal(info.startStr, info.endStr);
        },
        eventClick: function(info) {
            if (new Date(info.event.start) >= new Date()) {
                if (confirm("Voulez-vous annuler cette réservation ou débloquer ce créneau ?")) {
                    handleBookingAction('cancel', info.event.startStr, info.event.endStr);
                }
            } else {
                alert("Vous ne pouvez pas annuler une réservation passée.");
            }
        }
    });

    calendar.render();

    housingSelect.addEventListener('change', function() {
        calendar.refetchEvents();
    });

    function openModal(startDate, endDate) {
        var modal = document.getElementById("myModal");
        var span = document.getElementsByClassName("close")[0];
        var form = document.getElementById("bookingForm");

        form.onsubmit = function(e) {
            e.preventDefault();
            var action = document.querySelector('input[name="action"]:checked').value;
            handleBookingAction(action, startDate, endDate);
            modal.style.display = "none";
        };

        modal.style.display = "block";

        span.onclick = function() {
            modal.style.display = "none";
        };

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        };
    }

    function handleBookingAction(action, startDate, endDate) {
        var housingId = housingSelect.value;
        var url = '';
        var data = { startDate: startDate, endDate: endDate, housingId: housingId };

        if (action === 'block') {
            url = '/admin/bookings/block';
        } else if (action === 'cancel') {
            url = '/admin/bookings/cancel';
        }

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errData => {
                    throw new Error(errData.message || 'Erreur lors de l\'exécution de l\'action.');
                });
            }
            return response.json();
        })
        .then(data => {
            calendar.refetchEvents();
            alert(data.message);
        })
        .catch(error => {
            console.error('Erreur:', error);
            alert(error.message);
        });
    }
});

function updateBookingStatus(bookingId, status) {
    fetch(`/admin/bookings/${bookingId}/status`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: status })
    })
    .then(response => {
        if (response.ok) {
            window.location.reload();
        } else {
            return response.json().then(errData => {
                throw new Error(errData.message || 'Erreur lors de la mise à jour du statut.');
            });
        }
    })
    .catch(error => {
        alert(error.message);
    });
}
    </script>

    <!-- Modal -->
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3>Choisissez une action pour ces dates</h3>
            <form id="bookingForm">
                <label>
                    <input type="radio" name="action" value="block"> Bloquer
                </label><br>
                <label>
                    <input type="radio" name="action" value="cancel"> Annuler
                </label><br><br>
                <button type="submit">Valider</button>
            </form>
        </div>
    </div>
</body>
</html>



-------------------------------
- views/admin/partials/dashboard.ejs :
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header card-header-primary">
                        <h4 class="card-title">Tableau de bord</h4>
                        <p class="card-category">Bienvenue sur le tableau de bord de l'administrateur</p>
                    </div>
                    <div class="card-body">
                        <p>Utilisez le menu de gauche pour naviguer entre les différentes sections de l'administration.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



-------------------------------
- views/admin/partials/destination.ejs : 
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Gestion des Destinations</h4>
            <p class="card-category">Gestion des Destinations de votre site</p>
          </div>
          <div class="card-body">
            <a href="/admin/destinations/new" class="btn btn-primary">Ajouter une nouvelle destination</a>
            <div class="table-responsive">
              <table class="table">
                <thead class="text-primary">
                  <th>ID</th>
                  <th>Nom</th>
                  <th>Actions</th>
                </thead>
                <tbody>
                  <% destinations.forEach(destination => { %>
                    <tr>
                      <td><%= destination.id %></td>
                      <td><%= destination.name %></td>
                      <td>
                        <a href="/admin/destinations/edit/<%= destination.id %>" class="btn btn-warning btn-sm">Modifier</a>
                        <form action="/admin/destinations/delete/<%= destination.id %>" method="POST" style="display:inline;">
                          <button type="submit" class="btn btn-danger btn-sm">Supprimer</button>
                        </form>
                      </td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


-------------------------------
- views/admin/partials/editDestination.ejs : 
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Modifier la destination</h4>
          </div>
          <div class="card-body">
            <form action="/admin/destinations/edit/<%= destination.id %>" method="POST" enctype="multipart/form-data">
              <div class="form-group">
                <label for="name">Nom de la destination</label>
                <input type="text" class="form-control" id="name" name="name" value="<%= destination.name %>" required>
              </div>
              <div class="form-group">
                <label for="description">Description</label>
                <textarea class="form-control" id="description" name="description" rows="5" required><%= destination.description %></textarea>
              </div>
              <div class="form-group">
                <label for="location">Emplacement</label>
                <input type="text" class="form-control" id="location" name="location" value="<%= destination.location %>" required>
              </div>
              <div class="form-group">
                <label for="categories">Catégories</label>
                <input type="text" class="form-control" id="categories" name="categories" value="<%= destination.categories %>" required>
              </div>
              <div class="form-group">
                <label for="image">Image</label>
                <input type="file" class="form-control-file" id="image" name="image">
                <% if (destination.image) { %>
                  <img src="/<%= destination.image %>" alt="Current Image" class="img-thumbnail mt-2" style="max-width: 200px;">
                <% } %>
                <input type="hidden" name="existingImage" value="<%= destination.image %>">
              </div>
              <button type="submit" class="btn btn-primary">Enregistrer les modifications</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

-------------------------------
- views/admin/partials/newDestination.ejs : 
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Ajouter une nouvelle destination</h4>
          </div>
          <div class="card-body">
            <form action="/admin/destinations/new" method="POST" enctype="multipart/form-data">
              <div class="form-group">
                <label for="name">Nom</label>
                <input type="text" class="form-control" id="name" name="name" required>
              </div>
              <div class="form-group">
                <label for="location">Lieu</label>
                <input type="text" class="form-control" id="location" name="location" required>
              </div>
              <div class="form-group">
                <label for="description">Description</label>
                <textarea class="form-control" id="description" name="description" rows="5" required></textarea>
              </div>
              <div class="form-group">
                <label for="categories">Catégories</label>
                <input type="text" class="form-control" id="categories" name="categories" required>
              </div>
              <div class="form-group">
                <label for="image">Image</label>
                <input type="file" class="form-control-file" id="image" name="image">
              </div>
              <button type="submit" class="btn btn-primary">Ajouter</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

-------------------------------
- views/admin/partials/hebergements.ejs : 
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Gestion des Hébergements</h4>
            <p class="card-category">Liste des hébergements existants</p>
          </div>
          <div class="card-body">
            <a href="/admin/hebergements/new" class="btn btn-primary">Ajouter un nouvel hébergement</a>
            <div class="table-responsive">
              <table class="table">
                <thead class="text-primary">
                  <th>ID</th>
                  <th>Titre</th>
                  <th>Description</th>
                  <th>Type</th>
                  <th>Prix</th>
                  <th>Capacité</th>
                  <th>Thème</th>
                  <th>Photo</th>
                  <th>Actions</th>
                </thead>
                <tbody>
                  <% hebergements.forEach(hebergement => { %>
                    <tr>
                      <td><%= hebergement.id %></td>
                      <td><%= hebergement.title %></td>
                      <td><%= hebergement.description %></td>
                      <td><%= hebergement.type %></td>
                      <td><%= hebergement.price %></td>
                      <td><%= hebergement.capacity %></td>
                      <td><%= hebergement.themeId %></td>
                      <td>
                        <% if (hebergement.Photos && hebergement.Photos.length > 0) { %>
                          <img src="/<%= hebergement.Photos[0].path %>" class="img-thumbnail" style="width: 50px;">
                        <% } else { %>
                          <img src="/path/to/default-image.jpg" class="img-thumbnail" style="width: 50px;">
                        <% } %>
                      </td>
                      <td>
                        <a href="/admin/hebergements/edit/<%= hebergement.id %>" class="btn btn-warning">Modifier</a>
                        <form action="/admin/hebergements/delete/<%= hebergement.id %>" method="POST" style="display:inline;">
                          <button type="submit" class="btn btn-danger">Supprimer</button>
                        </form>
                      </td>
                    </tr>
                  <% }) %>                  
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



-------------------------------
- views/admin/partials/newHebergement.ejs : 
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Ajouter un nouvel hébergement</h4>
          </div>
          <div class="card-body">
            <form action="/admin/hebergements/new" method="POST" enctype="multipart/form-data" onsubmit="tinyMCE.triggerSave(true, true)">
              <div class="form-group">
                <label for="title">Titre</label>
                <input type="text" class="form-control" id="title" name="title" required>
              </div>
              <div class="form-group">
                <label for="description">Description</label>
                <textarea class="form-control" id="description" name="description" rows="5" required></textarea>
              </div>
              <div class="form-group">
                <label for="type">Type</label>
                <input type="text" class="form-control" id="type" name="type" required>
              </div>
              <div class="form-group">
                <label for="price">Prix</label>
                <input type="number" class="form-control" id="price" name="price" required>
              </div>
              <div class="form-group">
                <label for="capacity">Capacité</label>
                <input type="number" class="form-control" id="capacity" name="capacity" required>
              </div>
              <div class="form-group">
                <label for="themeId">Thème</label>
                <select class="form-control" id="themeId" name="themeId" required>
                  <option value="">Sélectionnez un thème</option>
                  <% themes.forEach(theme => { %>
                    <option value="<%= theme.id %>"><%= theme.name %></option>
                  <% }); %>
                </select>
              </div>
              <div class="form-group">
                <label for="destinationId">Destination</label>
                <select class="form-control" id="destinationId" name="destinationId" required>
                  <option value="">Sélectionnez une destination</option>
                  <% destinations.forEach(destination => { %>
                    <option value="<%= destination.id %>"><%= destination.name %></option>
                  <% }); %>
                </select>
              </div>
              <div class="form-group">
                <label for="images">Photos</label>
                <input type="file" class="form-control-file" id="images" name="images" multiple>
              </div>
              
              <!-- Simples équipements -->
              <div class="form-group">
                <h4>Équipements Simples</h4>
                <% simpleEquipments.forEach(equipment => { %>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="simpleEquipments" value="<%= equipment.id %>">
                    <label class="form-check-label"><%= equipment.name %></label>
                  </div>
                <% }) %>
              </div>
              <!-- Équipements Premiums -->
              <div class="form-group">
                <h4>Équipements Premiums</h4>
                <% premiumEquipments.forEach(equipment => { %>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="premiumEquipments" value="<%= equipment.id %>">
                    <label class="form-check-label"><%= equipment.name %></label>
                  </div>
                <% }) %>
              </div>

              <button type="submit" class="btn btn-primary">Ajouter</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  tinymce.init({
    selector: 'textarea#description',
    plugins: 'link image code',
    toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',
    setup: function (editor) {
      editor.on('change', function () {
        editor.save(); // Sync the content to the original textarea
      });
    }
  });

  // Ensure that TinyMCE content is properly submitted
  document.querySelector('form').addEventListener('submit', function(e) {
    // Ensure the editor content is updated in the textarea before submission
    tinymce.triggerSave();
  });
</script>



-------------------------------
- views/admin/partials/editHebergement.ejs :
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Modifier l'hébergement</h4>
          </div>
          <div class="card-body">
            <form action="/admin/hebergements/edit/<%= hebergement.id %>" method="POST" enctype="multipart/form-data">
              <div class="form-group">
                <label for="title">Titre</label>
                <input type="text" class="form-control" id="title" name="title" value="<%= hebergement.title %>" required>
              </div>
              <div class="form-group">
                <label for="description">Description</label>
                <textarea class="form-control" id="description" name="description" rows="5" required><%= hebergement.description %></textarea>
              </div>
              <div class="form-group">
                <label for="type">Type</label>
                <input type="text" class="form-control" id="type" name="type" value="<%= hebergement.type %>" required>
              </div>
              <div class="form-group">
                <label for="price">Prix</label>
                <input type="number" class="form-control" id="price" name="price" value="<%= hebergement.price %>" required>
              </div>
              <div class="form-group">
                <label for="capacity">Capacité</label>
                <input type="number" class="form-control" id="capacity" name="capacity" value="<%= hebergement.capacity %>" required>
              </div>
              <div class="form-group">
                <label for="themeId">Thème</label>
                <select class="form-control" id="themeId" name="themeId" required>
                  <% themes.forEach(theme => { %>
                    <option value="<%= theme.id %>" <%= theme.id === hebergement.themeId ? 'selected' : '' %>><%= theme.name %></option>
                  <% }); %>
                </select>
              </div>
              <div class="form-group">
                <label for="destinationId">Destination</label>
                <select class="form-control" id="destinationId" name="destinationId" required>
                  <% destinations.forEach(destination => { %>
                    <option value="<%= destination.id %>" <%= destination.id === hebergement.destinationId ? 'selected' : '' %>><%= destination.name %></option>
                  <% }); %>
                </select>
              </div>

              <div class="form-group">
                <label for="existingPhotos">Photos existantes</label>
                <div>
                  <% if (hebergement.Photos && hebergement.Photos.length > 0) { %>
                    <% hebergement.Photos.forEach(photo => { %>
                      <div class="img-thumbnail" style="display: inline-block; margin-right: 10px;">
                        <img src="/<%= photo.path %>" style="width: 100px;">
                      </div>
                    <% }) %>
                  <% } else { %>
                    <p>Aucune photo disponible.</p>
                  <% } %>
                </div>
              </div>
              <div class="form-group">
                <label for="images">Ajouter de nouvelles photos</label>
                <input type="file" class="form-control-file" id="images" name="images" multiple>
              </div>

              <!-- Simples équipements -->
              <div class="form-group">
                <h4>Équipements Simples</h4>
                <% simpleEquipments.forEach(equipment => { %>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="simpleEquipments" value="<%= equipment.id %>" 
                    <%= (hebergement.Equipments && hebergement.Equipments.some(e => e.id === equipment.id)) ? 'checked' : '' %>>
                    <label class="form-check-label"><%= equipment.name %></label>
                  </div>
                <% }) %>
              </div>

              <!-- Équipements Premiums -->
              <div class="form-group">
                <h4>Équipements Premiums</h4>
                <% premiumEquipments.forEach(equipment => { %>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="premiumEquipments" value="<%= equipment.id %>" 
                    <%= (hebergement.Equipments && hebergement.Equipments.some(e => e.id === equipment.id)) ? 'checked' : '' %>>
                    <label class="form-check-label"><%= equipment.name %></label>
                  </div>
                <% }) %>
              </div>

              <button type="submit" class="btn btn-primary">Mettre à jour</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  tinymce.init({
    selector: 'textarea#description',
    plugins: 'link image code',
    toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',
    setup: function (editor) {
      editor.on('change', function () {
        editor.save(); // Sync the content to the original textarea
      });
    }
  });

  // Ensure that TinyMCE content is properly submitted
  document.querySelector('form').addEventListener('submit', function(e) {
    // Ensure the editor content is updated in the textarea before submission
    tinymce.triggerSave();
  });
</script>



-------------------------------
- views/admin/partials/messages.ejs :
<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
                <h4 class="card-title">Gestion des Messages</h4>
                <p class="card-category">Liste des messages</p>
            </div>
            <div class="card-body">
              <div class="table-responsive">
                <table class="table">
                  <thead class="text-primary">
                    <tr>
                      <th>Nom</th>
                      <th>Email</th>
                      <th>Numéro</th>
                      <th>Message</th>
                      <th>Provenance</th> <!-- Nouvelle colonne -->
                    </tr>
                  </thead>
                  <tbody>
                    <% messages.forEach(message => { %>
                      <tr>
                        <td><a href="/admin/messages/<%= message.id %>"><%= message.name %></a></td>
                        <td><a href="/admin/messages/<%= message.id %>"><%= message.email %></a></td>
                        <td><a href="/admin/messages/<%= message.id %>"><%= message.phone %></a></td>
                        <td><a href="/admin/messages/<%= message.id %>"><%= message.content.substring(0, 50) %>...</a></td>
                        <td><%= message.housingId ? 'Hébergement' : 'Contact Général' %></td> <!-- Source du message -->
                      </tr>
                    <% }) %>
                  </tbody>

                  </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  

-------------------------------
- views/admin/partials/messageDetail.ejs :
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Détail du Message</h4>
            <p class="card-category">Détails du message reçu</p>
          </div>
          <div class="card-body">
            <div>
              <p><strong>Nom :</strong> <%= message.name %></p>
              <p><strong>Email :</strong> <%= message.email %></p>
              <p><strong>Numéro :</strong> <%= message.phone ? message.phone : 'N/A' %></p>
              <p><strong>Message :</strong></p>
              <p><%= message.content %></p>
              <p><strong>Date d'envoi :</strong> <%= message.createdAt.toLocaleDateString() %></p>

              <!-- Ajout du lien vers l'hébergement si applicable -->
              <% if (message.Housing) { %>
                <p><strong>Hébergement :</strong> <a href="/hebergements/<%= message.Housing.id %>"><%= message.Housing.title %></a></p>
              <% } else { %>
                <p><strong>Provenance :</strong> Page de Contact Général</p>
              <% } %>

              <a href="/admin/messages" class="btn btn-secondary">Retour à la liste</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



-------------------------------
- views/admin/partials/pages.ejs :
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Gestion des Pages</h4>
            <p class="card-category">Liste des pages existantes</p>
          </div>
          <div class="card-body">
            <a href="/admin/pages/new" class="btn btn-primary mb-3">Ajouter une nouvelle page</a>
            <div class="table-responsive">
              <table class="table">
                <thead class="text-primary">
                  <th>ID</th>
                  <th>Titre</th>
                  <th>URL</th>
                  <th>Statut</th>
                  <th>Actions</th>
                </thead>
                <tbody>
                  <% pages.forEach(page => { %>
                    <tr>
                      <td><%= page.id %></td>
                      <td><%= page.title %></td>
                      <td><a href="/<%= page.url %>" target="_blank"><%= page.url %></a></td>
                      <td><%= page.status %></td>
                      <td>
                        <a href="/admin/pages/edit/<%= page.id %>" class="btn btn-warning btn-sm">Modifier</a>
                        <form action="/admin/pages/delete/<%= page.id %>" method="POST" style="display:inline;">
                          <button type="submit" class="btn btn-danger btn-sm">Supprimer</button>
                        </form>
                      </td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
              <% if (pages.length === 0) { %>
                <p class="text-center">Aucune page trouvée.</p>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



-------------------------------
- views/admin/partials/newPage.ejs : 
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Ajouter une nouvelle page</h4>
          </div>
          <div class="card-body">
            <form action="/admin/pages/add" method="POST" enctype="multipart/form-data">
              <div class="form-group">
                <label for="title">Titre de la page</label>
                <input type="text" class="form-control" id="title" name="title" required>
              </div>
              <div class="form-group">
                <label for="url">URL de la page</label>
                <input type="text" class="form-control" id="url" name="url" required>
              </div>
              <div class="form-group">
                <label for="content">Contenu</label>
                <textarea class="form-control" id="content" name="content" rows="5" required></textarea>
              </div>
              <div class="form-group">
                <label for="photo">Photo</label>
                <input type="file" class="form-control" id="photo" name="photo">
              </div>
              <div class="form-group">
                <label for="seoTitle">SEO Title</label>
                <input type="text" class="form-control" id="seoTitle" name="seoTitle">
              </div>
              <div class="form-group">
                <label for="seoDescription">Meta Description</label>
                <textarea class="form-control" id="seoDescription" name="seoDescription" rows="3"></textarea>
              </div>
              <div class="form-group">
                <label for="status">Statut</label>
                <select class="form-control" id="status" name="status">
                  <option value="draft">Brouillon</option>
                  <option value="published">Publié</option>
                  <option value="archived">Archivé</option>
                </select>
              </div>
              <button type="submit" class="btn btn-primary">Ajouter</button>
            </form>            
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  tinymce.init({
    selector: 'textarea#content',
    plugins: 'link image code',
    toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',
    setup: function (editor) {
      editor.on('change', function () {
        editor.save(); // Sync the content to the original textarea
      });
    }
  });

  // Ensure that TinyMCE content is properly submitted
  document.querySelector('form').addEventListener('submit', function(e) {
    tinymce.triggerSave(); // Ensure the editor content is updated in the textarea before submission
  });
</script>



-------------------------------
- views/admin/partials/editPage.ejs :
<div class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <div class="card">
          <div class="card-header card-header-primary">
            <h4 class="card-title">Modifier la page</h4>
          </div>
          <div class="card-body">
            <form action="/admin/pages/edit/<%= page.id %>" method="POST" enctype="multipart/form-data">
              <div class="form-group">
                <label for="title">Titre de la page</label>
                <input type="text" class="form-control" id="title" name="title" value="<%= page.title %>" required>
              </div>
              <div class="form-group">
                <label for="url">URL de la page</label>
                <input type="text" class="form-control" id="url" name="url" value="<%= page.url %>" required>
              </div>
              <div class="form-group">
                <label for="content">Contenu</label>
                <textarea class="form-control" id="content" name="content" rows="10" required><%= page.content %></textarea>
              </div>
              <div class="form-group">
                <label for="photo">Photo</label>
                <input type="file" class="form-control" id="photo" name="photo">
                <input type="hidden" name="existingPhoto" value="<%= page.photo %>">
              </div>
              <div class="form-group">
                <label for="seoTitle">SEO Title</label>
                <input type="text" class="form-control" id="seoTitle" name="seoTitle" value="<%= page.seoTitle %>">
              </div>
              <div class="form-group">
                <label for="seoDescription">Meta Description</label>
                <textarea class="form-control" id="seoDescription" name="seoDescription" rows="3"><%= page.seoDescription %></textarea>
              </div>
              <div class="form-group">
                <label for="status">Statut</label>
                <select class="form-control" id="status" name="status">
                  <option value="draft" <%= page.status === 'draft' ? 'selected' : '' %>>Brouillon</option>
                  <option value="published" <%= page.status === 'published' ? 'selected' : '' %>>Publié</option>
                  <option value="archived" <%= page.status === 'archived' ? 'selected' : '' %>>Archivé</option>
                </select>
              </div>
              <button type="submit" class="btn btn-primary">Mettre à jour</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  tinymce.init({
    selector: 'textarea#content',
    plugins: 'link image code',
    toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',
    setup: function (editor) {
      editor.on('change', function () {
        editor.save(); // Sync the content to the original textarea
      });
    }
  });

  // Ensure that TinyMCE content is properly submitted
  document.querySelector('form').addEventListener('submit', function(e) {
    tinymce.triggerSave(); // Ensure the editor content is updated in the textarea before submission
  });
</script>



-------------------------------
- views/admin/partials/theme.ejs : 
<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
              <h4 class="card-title">Gestion des Thèmes</h4>
              <p class="card-category">Gestion des Thèmes de votre site</p>
            </div>
            <div class="card-body">
                <a href="/admin/themes/new" class="btn btn-primary">Ajouter un nouveau thème</a>
              <div class="table-responsive">
                <table class="table">
                  <thead class="text-primary">
                    <th>ID</th>
                    <th>Nom</th>
                    <th>Sous-titre</th>
                    <th>Description</th>
                    <th>Image</th>
                    <th>Actions</th>
                  </thead>
                  <tbody>
                    <% themes.forEach(theme => { %>
                      <tr>
                        <td><%= theme.id %></td>
                        <td><%= theme.name %></td>
                        <td><%= theme.subtitle %></td>
                        <td><%= theme.description %></td>
                        <td>
                          <% if (theme.image) { %>
                            <img src="/<%= theme.image %>" alt="<%= theme.name %>" class="img-thumbnail" style="max-width: 100px;">
                          <% } else { %>
                            Pas d'image
                          <% } %>
                        </td>
                        <td>
                          <a href="/admin/themes/edit/<%= theme.id %>" class="btn btn-warning">Modifier</a>
                          <form action="/admin/themes/delete/<%= theme.id %>" method="POST" style="display:inline;">
                            <button type="submit" class="btn btn-danger">Supprimer</button>
                          </form>
                        </td>
                      </tr>
                    <% }) %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  


-------------------------------
- views/admin/partials/editTheme.ejs : 
<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
              <h4 class="card-title">Modifier le thème</h4>
            </div>
            <div class="card-body">
              <form action="/admin/themes/edit/<%= theme.id %>" method="POST" enctype="multipart/form-data">
                <div class="form-group">
                  <label for="name">Nom du thème</label>
                  <input type="text" class="form-control" id="name" name="name" value="<%= theme.name %>" required>
                </div>
                <div class="form-group">
                  <label for="subtitle">Sous-titre</label>
                  <input type="text" class="form-control" id="subtitle" name="subtitle" value="<%= theme.subtitle %>">
                </div>
                <div class="form-group">
                  <label for="description">Description</label>
                  <textarea class="form-control" id="description" name="description" rows="5" required><%= theme.description %></textarea>
                </div>
                <div class="form-group">
                  <label for="image">Image</label>
                  <input type="file" class="form-control-file" id="image" name="image">
                  <% if (theme.image) { %>
                    <img src="/<%= theme.image %>" alt="<%= theme.name %>" class="img-thumbnail" style="max-width: 100px;">
                  <% } %>
                  <input type="hidden" name="existingImage" value="<%= theme.image %>">
                </div>
                <button type="submit" class="btn btn-primary">Enregistrer les modifications</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  


-------------------------------
- views/admin/partials/newTheme.ejs :
<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
              <h4 class="card-title">Ajouter un nouveau thème</h4>
            </div>
            <div class="card-body">
              <form action="/admin/themes/new" method="POST" enctype="multipart/form-data">
                <div class="form-group">
                  <label for="name">Nom du thème</label>
                  <input type="text" class="form-control" id="name" name="name" required>
                </div>
                <div class="form-group">
                  <label for="subtitle">Sous-titre</label>
                  <input type="text" class="form-control" id="subtitle" name="subtitle">
                </div>
                <div class="form-group">
                  <label for="description">Description</label>
                  <textarea class="form-control" id="description" name="description" rows="5" required></textarea>
                </div>
                <div class="form-group">
                  <label for="image">Image</label>
                  <input type="file" class="form-control-file" id="image" name="image">
                </div>
                <button type="submit" class="btn btn-primary">Ajouter</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  

-------------------------------
- views/admin/partials/users.ejs : 
<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
              <h4 class="card-title">Gestion des Utilisateurs</h4>
              <p class="card-category">Liste des utilisateurs existants</p>
            </div>
            <div class="card-body">
              <a href="/admin/users/new" class="btn btn-primary">Ajouter un nouvel utilisateur</a>
              <div class="table-responsive">
                <table class="table">
                  <thead class="text-primary">
                    <th>ID</th>
                    <th>Nom d'utilisateur</th>
                    <th>Email</th>
                    <th>Rôle</th>
                    <th>Actions</th>
                  </thead>
                  <tbody>
                    <% users.forEach(user => { %>
                      <tr>
                        <td><%= user.id %></td>
                        <td><%= user.username %></td>
                        <td><%= user.email %></td>
                        <td><%= user.role %></td>
                        <td>
                          <a href="/admin/users/edit/<%= user.id %>" class="btn btn-warning">Modifier</a>
                          <form action="/admin/users/delete/<%= user.id %>" method="POST" style="display:inline;">
                            <button type="submit" class="btn btn-danger">Supprimer</button>
                          </form>
                        </td>
                      </tr>
                    <% }) %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  

-------------------------------
- views/admin/partials/newUser.ejs :

<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
              <h4 class="card-title">Ajouter un nouvel utilisateur</h4>
            </div>
            <div class="card-body">
              <form action="/admin/users/new" method="POST">
                <div class="form-group">
                  <label for="username">Nom d'utilisateur</label>
                  <input type="text" class="form-control" id="username" name="username" required>
                </div>
                <div class="form-group">
                  <label for="email">Email</label>
                  <input type="email" class="form-control" id="email" name="email" required>
                </div>
                <div class="form-group">
                  <label for="password">Mot de passe</label>
                  <input type="password" class="form-control" id="password" name="password" required>
                </div>
                <div class="form-group">
                  <label for="role">Rôle</label>
                  <select class="form-control" id="role" name="role" required>
                    <option value="admin">Admin</option>
                    <option value="hebergeur">Hébergeur</option>
                    <option value="acheteur">Acheteur</option>
                  </select>
                </div>
                <div class="form-group">
                  <label for="firstName">Prénom</label>
                  <input type="text" class="form-control" id="firstName" name="firstName" required>
                </div>
                <div class="form-group">
                  <label for="lastName">Nom</label>
                  <input type="text" class="form-control" id="lastName" name="lastName" required>
                </div>
                <div class="form-group">
                  <label for="phone">Téléphone</label>
                  <input type="text" class="form-control" id="phone" name="phone">
                </div>
                <div class="form-group">
                  <label for="address">Adresse</label>
                  <input type="text" class="form-control" id="address" name="address">
                </div>
                <div class="form-group">
                  <label for="photo">Photo</label>
                  <input type="text" class="form-control" id="photo" name="photo">
                </div>
                <button type="submit" class="btn btn-primary">Ajouter</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  
-------------------------------
- views/admin/partials/editUser.ejs :
<div class="content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header card-header-primary">
              <h4 class="card-title">Modifier l'utilisateur</h4>
            </div>
            <div class="card-body">
              <form action="/admin/users/edit/<%= user.id %>" method="POST">
                <div class="form-group">
                  <label for="username">Nom d'utilisateur</label>
                  <input type="text" class="form-control" id="username" name="username" value="<%= user.username %>" required>
                </div>
                <div class="form-group">
                  <label for="email">Email</label>
                  <input type="email" class="form-control" id="email" name="email" value="<%= user.email %>" required>
                </div>
                <div class="form-group">
                  <label for="firstName">Prénom</label>
                  <input type="text" class="form-control" id="firstName" name="firstName" value="<%= user.firstName %>" required>
                </div>
                <div class="form-group">
                  <label for="lastName">Nom</label>
                  <input type="text" class="form-control" id="lastName" name="lastName" value="<%= user.lastName %>" required>
                </div>
                <div class="form-group">
                  <label for="phone">Téléphone</label>
                  <input type="text" class="form-control" id="phone" name="phone" value="<%= user.phone %>">
                </div>
                <div class="form-group">
                  <label for="address">Adresse</label>
                  <input type="text" class="form-control" id="address" name="address" value="<%= user.address %>">
                </div>
                <div class="form-group">
                  <label for="photo">Photo</label>
                  <input type="text" class="form-control" id="photo" name="photo" value="<%= user.photo %>">
                </div>
                <div class="form-group">
                  <label for="role">Rôle</label>
                  <select class="form-control" id="role" name="role" required>
                    <option value="admin" <%= user.role === 'admin' ? 'selected' : '' %>>Admin</option>
                    <option value="hebergeur" <%= user.role === 'hebergeur' ? 'selected' : '' %>>Hébergeur</option>
                    <option value="acheteur" <%= user.role === 'acheteur' ? 'selected' : '' %>>Acheteur</option>
                  </select>
                </div>
                <button type="submit" class="btn btn-primary">Enregistrer les modifications</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
    
    

-------------------------------
- views/admin/dashboard.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/material-dashboard.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <script src="https://cdn.tiny.cloud/1/obuvcqs9576s28bsa9j1b7921z1gljr2khea3mo8hzbrdm5x/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    <title>Admin Dashboard</title>
</head>
<body>
    <div class="wrapper">
        <div class="sidebar" data-color="purple" data-background-color="white">
            <div class="logo">
                <a href="#" class="simple-text logo-normal">Atypikhouse</a>
            </div>
            <div class="sidebar-wrapper">
                <ul class="nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/hebergements">
                            <p>Hébergements</p>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/bookings">
                            <p>Réservations</p>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/avis">
                            <p>Avis</p>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/messages">
                            <p>Messages</p>
                        </a>
                    </li>

                    <% if (user.role === 'admin') { %>
                        <li class="nav-item active">
                            <a class="nav-link" href="/admin/pages">
                                <p>Pages</p>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/destinations">
                                <p>Destinations</p>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/themes">
                                <p>Thèmes</p>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/blog">
                                <p>Blog</p>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/users">
                                <p>Utilisateurs</p>
                            </a>
                        </li>                        
                    <% } %>
                </ul>
            </div>
        </div>
        <div class="main-panel">
            <%- include(`partials/${partial}`, { 
                themes: typeof themes !== 'undefined' ? themes : [], 
                destinations: typeof destinations !== 'undefined' ? destinations : [], 
                article: typeof article !== 'undefined' ? article : null 
            }) %>
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        tinymce.init({
            selector: 'textarea#content',
            plugins: 'link image code',
            toolbar: 'undo redo | formatselect | bold italic | alignleft aligncenter alignright | code',
            setup: function (editor) {
                editor.on('change', function () {
                    editor.save(); // Sync the content to the original textarea
                });
            }
        });

        // Ensure that TinyMCE content is properly submitted
        document.querySelector('form').addEventListener('submit', function(e) {
            tinymce.triggerSave(); // Sync TinyMCE content with the underlying textarea
        });
    </script>
</body>
</html>



-------------------------------
- views/partials/nav.ejs : 
<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">
    <img src="/images/logo.png" width="147" height="60" alt="Logo">
  </a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
  <div class="collapse navbar-collapse" id="navbarNav">
    <ul class="navbar-nav ml-auto">
      <li class="nav-item">
        <a class="nav-link" href="/">Home</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/destinations">Destinations</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/hebergements">Nos Hébergements</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/themes">Les Themes</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/blog">Blog</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/hote">Devenez Hôte</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/contact">Contact</a>
      </li>
      <% if (user) { %>
        <li class="nav-item">
          <a class="nav-link" href="/bookings">Mes Réservations</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/profile">Profile</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/logout">Logout</a>
        </li>
      <% } else { %>
        <li class="nav-item">
          <a class="nav-link" href="/login">Login</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/register">Register</a>
        </li>
      <% } %>
    </ul>
  </div>
</nav>



-------------------------------
- views/partials/footer.ejs : 
<footer class="bg-light text-center text-lg-start mt-5">
  <div class="text-center p-3" style="background-color: rgba(0, 0, 0, 0.2);">
    © 2023 AtypikHouse. Tous droits réservés.
  </div>
</footer>


-------------------------------

- views/add-booking.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ajouter une Réservation</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Ajouter une Réservation</h1>
    <form action="/bookings/add" method="POST">
      <div class="form-group">
        <label for="housing">Hébergement</label>
        <select name="housingId" id="housing" class="form-control" required>
          <% housings.forEach(housing => { %>
            <option value="<%= housing.id %>"><%= housing.title %></option>
          <% }) %>
        </select>
      </div>
      <div class="form-group">
        <label for="startDate">Date de début</label>
        <input type="date" name="startDate" id="startDate" class="form-control" required>
      </div>
      <div class="form-group">
        <label for="endDate">Date de fin</label>
        <input type="date" name="endDate" id="endDate" class="form-control" required>
      </div>
      <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/add-destination.ejs :

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ajouter une Destination</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Ajouter une Destination</h1>
    <form action="/destinations/add" method="POST" enctype="multipart/form-data">
      <div class="form-group">
        <label for="name">Nom de la destination</label>
        <input type="text" name="name" id="name" class="form-control" required>
      </div>
      <div class="form-group">
        <label for="location">Lieu</label>
        <input type="text" name="location" id="location" class="form-control" required>
      </div>
      <div class="form-group">
        <label for="description">Description</label>
        <textarea name="description" id="description" class="form-control" required></textarea>
      </div>
      <div class="form-group">
        <label for="categories">Catégories</label>
        <input type="text" name="categories" id="categories" class="form-control" required>
      </div>
      <div class="form-group">
        <label for="image">Image</label>
        <input type="file" name="image" id="image" class="form-control" required>
      </div>
      <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/add-hebergement.ejs :
<!-- views/add-hebergement.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ajouter un Hébergement</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.tiny.cloud/1/zdtcfe1fvgcryohoophq1f4hs9lv8tbcyklegpll2gkylova/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
  <script>
    tinymce.init({
      selector: 'textarea#description',
      setup: function (editor) {
        editor.on('change', function () {
          editor.save();
        });
      }
    });
  </script>
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Ajouter un Hébergement</h1>
    <form action="/hebergements/add" method="POST" enctype="multipart/form-data">
      <div class="form-group">
        <label for="title">Titre</label>
        <input type="text" class="form-control" id="title" name="title" required>
      </div>
      <div class="form-group">
        <label for="description">Description</label>
        <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
      </div>
      <div class="form-group">
        <label for="type">Type</label>
        <input type="text" class="form-control" id="type" name="type" required>
      </div>
      <div class="form-group">
        <label for="price">Prix</label>
        <input type="number" class="form-control" id="price" name="price" required>
      </div>
      <div class="form-group">
        <label for="capacity">Capacité</label>
        <input type="number" class="form-control" id="capacity" name="capacity" required>
      </div>
      <div class="form-group">
        <label for="themeId">Thème</label>
        <select class="form-control" id="themeId" name="themeId" required>
          <% themes.forEach(theme => { %>
            <option value="<%= theme.id %>"><%= theme.name %></option>
          <% }) %>
        </select>
      </div>
      <div class="form-group">
        <label for="destinationId">Destination</label>
        <select class="form-control" id="destinationId" name="destinationId" required>
          <% destinations.forEach(destination => { %>
            <option value="<%= destination.id %>"><%= destination.name %></option>
          <% }) %>
        </select>
      </div>
      <div class="form-group">
        <label for="images">Photos</label>
        <input type="file" class="form-control-file" id="images" name="images" multiple>
      </div>
      <!-- Simples équipements -->
      <div class="form-group">
        <h4>Équipements Simples</h4>
        <% simpleEquipments.forEach(equipment => { %>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" name="simpleEquipments" value="<%= equipment.id %>">
            <label class="form-check-label"><%= equipment.name %></label>
          </div>
        <% }) %>
      </div>
      <!-- Équipements Premiums -->
      <div class="form-group">
        <h4>Équipements Premiums</h4>
        <% premiumEquipments.forEach(equipment => { %>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" name="premiumEquipments" value="<%= equipment.id %>">
            <label class="form-check-label"><%= equipment.name %></label>
          </div>
        <% }) %>
      </div>
      <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>



-------------------------------
- views/blog.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Blog</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Blog</h1>
    <div class="row">
      <% articles.forEach(article => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <img src="/<%= article.image %>" class="card-img-top" alt="<%= article.title %>">
            <div class="card-body">
              <h5 class="card-title"><a href="/blog/<%= article.url %>"><%= article.title %></a></h5>
              <p class="card-text"><%= article.content.substring(0, 100) %>...</p>
              <p class="card-text"><small class="text-muted">Publié le <%= new Date(article.publishedAt).toLocaleDateString('fr-FR') %></small></p>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
  <%- include('partials/footer') %>
</body>
</html>


-------------------------------
- views/bookings.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mes Réservations</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Mes Réservations</h1>

    <h3>Réservations en cours</h3>
    <div class="row">
      <% ongoingBookings.forEach(booking => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <img src="/<%= booking.housing.image %>" class="card-img-top" alt="<%= booking.housing.title %>">
            <div class="card-body">
              <h5 class="card-title"><%= booking.housing.title %></h5>
              <p class="card-text">Début : <%= booking.startDate.toDateString() %></p>
              <p class="card-text">Fin : <%= booking.endDate.toDateString() %></p>
              <p class="card-text">Statut : <%= booking.status %></p>
              <form action="/bookings/cancel/<%= booking.id %>" method="POST">
                <button type="submit" class="btn btn-danger">Annuler la réservation</button>
              </form>
            </div>
          </div>
        </div>
      <% }) %>
    </div>

    <h3>Réservations passées</h3>
    <div class="row">
      <% pastBookings.forEach(booking => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <img src="/<%= booking.housing.image %>" class="card-img-top" alt="<%= booking.housing.title %>">
            <div class="card-body">
              <h5 class="card-title"><%= booking.housing.title %></h5>
              <p class="card-text">Début : <%= booking.startDate.toDateString() %></p>
              <p class="card-text">Fin : <%= booking.endDate.toDateString() %></p>
              <p class="card-text">Statut : <%= booking.status %></p>
            </div>
          </div>
        </div>
      <% }) %>
    </div>

    <h3>Réservations annulées</h3>
    <div class="row">
      <% cancelledBookings.forEach(booking => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <img src="/<%= booking.housing.image %>" class="card-img-top" alt="<%= booking.housing.title %>">
            <div class="card-body">
              <h5 class="card-title"><%= booking.housing.title %></h5>
              <p class="card-text">Début : <%= booking.startDate.toDateString() %></p>
              <p class="card-text">Fin : <%= booking.endDate.toDateString() %></p>
              <p class="card-text">Statut : <%= booking.status %></p>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/comments.ejs :
<!-- views/comments.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Comments</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
</head>
<body>
  <div class="container mt-5">
    <h2>Comments</h2>
    <div class="list-group">
      <% comments.forEach(comment => { %>
        <div class="list-group-item">
          <h5><%= comment.User.firstName %> <%= comment.User.lastName %></h5>
          <p><%= comment.content %></p>
          <p>Rating: <%= comment.rating %> stars</p>
          <% if (comment.photo) { %>
            <img src="/<%= comment.photo %>" alt="User Photo" class="img-thumbnail" width="50">
          <% } %>
        </div>
      <% }) %>
    </div>
  </div>
</body>
</html>



-------------------------------
- views/contact.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Contactez-nous</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>

  <div class="container mt-5">
    <h1>Contactez-nous</h1>
    <div class="row">
      <div class="col-md-6">
        <form action="/contact/send" method="POST">
          <div class="form-group">
            <label for="name">Nom et Prénom</label>
            <input type="text" class="form-control" id="name" name="name" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="phone">Numéro (facultatif)</label>
            <input type="text" class="form-control" id="phone" name="phone">
          </div>
          <div class="form-group">
            <label for="content">Message</label>
            <textarea class="form-control" id="content" name="content" rows="5" required></textarea>
          </div>
          <button type="submit" class="btn btn-primary">Envoyer</button>
        </form>
      </div>
      <div class="col-md-6">
        <h3>Informations de contact</h3>
        <p>Pour toute question ou réservation, n'hésitez pas à nous contacter. Nous sommes à votre disposition pour vous aider à planifier votre séjour inoubliable chez AtypikHouse.</p>
        <p><strong>Adresse :</strong> 9 rue square de l'échiquier, Pierrefonds, Oise, France</p>
        <p><strong>Téléphone :</strong> +33 1 23 45 67 89</p>
        <p><strong>Email :</strong> contact@atypikhouse.fr</p>
      </div>
    </div>
    <% if (typeof success !== 'undefined' && success) { %>
        <div class="alert alert-success mt-4">
          Merci pour votre message. Nous vous répondrons dans les plus brefs délais.
        </div>
      <% } %>      
  </div>

  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/destinations.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Destinations</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Destinations</h1>
    <div class="row">
      <% destinations.forEach(destination => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <img src="<%= destination.image %>" class="card-img-top" alt="<%= destination.name %>">
            <div class="card-body">
              <h5 class="card-title"><%= destination.name %></h5>
              <p class="card-text"><%= destination.description %></p>
              <p class="card-text"><strong>Lieu :</strong> <%= destination.location %></p>
              <a href="/destinations/<%= destination.id %>" class="btn btn-primary">Voir plus</a>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>



-------------------------------
- views/hebergement-comments.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Commentaires</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1>Commentaires pour <%= housing.title %></h1>
    <div class="list-group">
      <% housing.Comments.forEach(comment => { %>
        <div class="list-group-item">
          <h5><%= comment.User.firstName %> <%= comment.User.lastName %> - <%= comment.rating %> étoiles</h5>
          <p><%= comment.content %></p>
          <% if (comment.photo) { %>
            <img src="/<%= comment.photo %>" alt="Comment Photo" class="img-thumbnail" style="max-width: 200px;">
          <% } %>
          <% if (comment.UserId === user.id) { %>
            <form action="/comments/<%= comment.id %>/edit" method="POST" enctype="multipart/form-data">
              <input type="hidden" name="_method" value="PUT">
              <div class="form-group">
                <label for="content">Commentaire</label>
                <textarea class="form-control" id="content" name="content" required><%= comment.content %></textarea>
              </div>
              <div class="form-group">
                <label for="rating">Évaluation</label>
                <input type="number" class="form-control" id="rating" name="rating" value="<%= comment.rating %>" min="0" max="5" required>
              </div>
              <div class="form-group">
                <label for="photo">Photo</label>
                <input type="file" class="form-control-file" id="photo" name="photo">
              </div>
              <button type="submit" class="btn btn-primary">Modifier</button>
            </form>
            <form action="/comments/<%= comment.id %>/delete" method="POST" class="mt-2">
              <input type="hidden" name="_method" value="DELETE">
              <button type="submit" class="btn btn-danger">Supprimer</button>
            </form>
          <% } %>
        </div>
      <% }) %>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>



-------------------------------
- views/hebergements-par-theme.ejs :
<!-- views/hebergements-par-theme.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hébergements par Thème</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Hébergements par Thème</h1>
    <div class="row">
      <% housings.forEach(housing => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <% if (housing.Photos && housing.Photos.length > 0) { %>
              <img src="/<%= housing.Photos[0].path %>" class="card-img-top" alt="<%= housing.title %>">
            <% } else { %>
              <img src="/path/to/default-image.jpg" class="card-img-top" alt="Default Image">
            <% } %>
            <div class="card-body">
              <h5 class="card-title"><%= housing.title %></h5>
              <p class="card-text"><%= housing.description.substring(0, 100) %>...</p>
              <a href="/hebergements/<%= housing.id %>" class="btn btn-primary">Voir plus</a>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/hebergements.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Nos Hébergements</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Nos Hébergements</h1>

    <% if (user) { %>
      <div class="text-right mb-4">
        <a href="/hebergements/add" class="btn btn-primary">Ajouter un hébergement</a>
      </div>
    <% } %>

    <div class="mb-4">
      <form id="filter-form" class="form-inline">
        <select class="form-control mr-2" id="sortBy" name="sortBy">
          <option value="recent">Les plus récentes</option>
          <option value="popular">Les plus populaires</option>
          <option value="expensive">Les plus chères</option>
          <option value="cheap">Les moins chères</option>
        </select>
        <select class="form-control mr-2" id="themeFilter" name="theme">
          <option value="">Tous les thèmes</option>
          <% themes.forEach(theme => { %>
            <option value="<%= theme.id %>"><%= theme.name %></option>
          <% }); %>
        </select>
        <button type="submit" class="btn btn-primary">Filtrer</button>
      </form>
    </div>

    <div class="row">
      <% housings.forEach(housing => { %>
        <div class="col-md-4">
          <div class="card mb-4">

            <% if (housing.Photos && housing.Photos.length > 0) { %>
              <img src="/<%= housing.Photos[0].path %>" class="card-img-top" alt="<%= housing.title %>">
            <% } else { %>
              <img src="/path/to/default-image.jpg" class="card-img-top" alt="Default Image">
            <% } %>                       


            <div class="card-body">
              <h5 class="card-title"><%= housing.title %></h5>
              
              <!-- Évaluation sous forme d'étoiles -->
              <% 
                let totalRating = 0;
                let totalComments = housing.Comments ? housing.Comments.length : 0;
                housing.Comments && housing.Comments.forEach(comment => {
                  totalRating += comment.rating;
                });
                let averageRating = totalComments ? (totalRating / totalComments).toFixed(1) : 0;
              %>
              <div class="d-flex align-items-center">
                <div class="mr-2">
                  <% for(let i = 1; i <= 5; i++) { %>
                    <i class="fas fa-star <%= i <= averageRating ? 'text-warning' : 'text-muted' %>"></i>
                  <% } %>
                </div>
                <span>(<%= totalComments %> commentaires)</span>
              </div>

              <p class="card-text mt-2">Prix: <%= housing.price %> €</p>
              <a href="/hebergements/<%= housing.id %>" class="btn btn-primary">Voir plus</a>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"></script>
</body>
</html>


-------------------------------
- views/hote.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Devenez Hôte</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Devenez Hôte</h1>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/index.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Accueil</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Bienvenue sur notre site de location de logements !</h1>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>



-------------------------------
- views/login.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h2>Login</h2>
    <% if (error) { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>
    <form action="/login" method="POST">
      <div class="form-group">
        <label for="username">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
      </div>
      <button type="submit" class="btn btn-primary">Login</button>
    </form>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/profile.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .profile-card {
      max-width: 500px;
      margin: auto;
      border: 1px solid #ddd;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .profile-photo {
      width: 150px;
      height: 150px;
      border-radius: 50%;
      object-fit: cover;
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <div class="profile-card text-center">
      <img src="<%= user.photo %>" alt="Profile Photo" class="profile-photo">
      <h2><%= user.firstName %> <%= user.lastName %></h2>
      <p><%= user.email %></p>
      <p><%= user.phone %></p>
      <p><%= user.address %></p>
      <button class="btn btn-primary mt-3" data-toggle="modal" data-target="#editProfileModal">Edit Profile</button>
      <button class="btn btn-danger mt-3" data-toggle="modal" data-target="#deleteProfileModal">Delete Account</button>
      <a href="/logout" class="btn btn-secondary mt-3">Logout</a>
    </div>
    <% if (error) { %>
      <div class="alert alert-danger mt-3"><%= error %></div>
    <% } %>
    <% if (success) { %>
      <div class="alert alert-success mt-3"><%= success %></div>
    <% } %>
  </div>

  <!-- Edit Profile Modal -->
  <div class="modal fade" id="editProfileModal" tabindex="-1" role="dialog" aria-labelledby="editProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editProfileModalLabel">Edit Profile</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form action="/profile" method="POST" enctype="multipart/form-data">
          <div class="modal-body">
            <div class="form-group">
              <label for="firstName">First Name</label>
              <input type="text" class="form-control" id="firstName" name="firstName" value="<%= user.firstName %>" required>
            </div>
            <div class="form-group">
              <label for="lastName">Last Name</label>
              <input type="text" class="form-control" id="lastName" name="lastName" value="<%= user.lastName %>" required>
            </div>
            <div class="form-group">
              <label for="email">Email</label>
              <input type="email" class="form-control" id="email" name="email" value="<%= user.email %>" required>
            </div>
            <div class="form-group">
              <label for="username">Username</label>
              <input type="text" class="form-control" id="username" name="username" value="<%= user.username %>" disabled>
            </div>
            <div class="form-group">
              <label for="phone">Phone</label>
              <input type="text" class="form-control" id="phone" name="phone" value="<%= user.phone %>">
            </div>
            <div class="form-group">
              <label for="address">Address</label>
              <input type="text" class="form-control" id="address" name="address" value="<%= user.address %>">
            </div>
            <div class="form-group">
              <label for="photo">Photo</label>
              <input type="file" class="form-control-file" id="photo" name="photo">
            </div>
            <div class="form-group">
              <label for="password">New Password</label>
              <input type="password" class="form-control" id="password" name="password">
            </div>
            <div class="form-group">
              <label for="confirmPassword">Confirm Password</label>
              <input type="password" class="form-control" id="confirmPassword" name="confirmPassword">
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Delete Profile Modal -->
  <div class="modal fade" id="deleteProfileModal" tabindex="-1" role="dialog" aria-labelledby="deleteProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteProfileModalLabel">Delete Account</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete your account? This action cannot be undone.
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <form action="/profile/delete" method="POST">
            <button type="submit" class="btn btn-danger">Delete Account</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/register.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h2>Register</h2>
    <% if (error) { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>
    <form action="/register" method="POST" enctype="multipart/form-data">
      <div class="form-group">
        <label for="firstName">First Name</label>
        <input type="text" class="form-control" id="firstName" name="firstName" required>
      </div>
      <div class="form-group">
        <label for="lastName">Last Name</label>
        <input type="text" class="form-control" id="lastName" name="lastName" required>
      </div>
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" class="form-control" id="email" name="email" required>
      </div>
      <div class="form-group">
        <label for="username">Username</label>
        <input type="text" class="form-control" id="username" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
      </div>
      <div class="form-group">
        <label for="phone">Phone</label>
        <input type="text" class="form-control" id="phone" name="phone">
      </div>
      <div class="form-group">
        <label for="address">Address</label>
        <input type="text" class="form-control" id="address" name="address">
      </div>
      <div class="form-group">
        <label for="photo">Photo</label>
        <input type="file" class="form-control-file" id="photo" name="photo">
      </div>
      <div class="form-group">
        <label for="role">Vous etes Acheteur ou Hébergeur ?</label>
        <select class="form-control" id="role" name="role" required>
          <option value="acheteur">Acheteur</option>
          <option value="hebergeur">Hébergeur</option>
        </select>
      </div>
      <div class="form-group">
        <p>Si vous voulez devenir hébergeur chez nous, vous devez envoyer un mail avec le sujet de "Augmentation de niveau" et votre Username et Email à <strong>gestion@atypikhouse.com</strong></p>
      </div>
      <button type="submit" class="btn btn-primary">Register</button>
    </form>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/single-article.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= article.title %></title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center"><%= article.title %></h1>
    <img src="/<%= article.image %>" class="img-fluid" alt="<%= article.title %>">
    <p class="text-muted text-center">Publié le <%= new Date(article.publishedAt).toLocaleDateString('fr-FR') %></p>
    <div class="mt-4">
      <%- article.content %>
    </div>
  </div>
  <%- include('partials/footer') %>
</body>
</html>



-------------------------------
- views/single-destination.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= destination.name %> - Destination</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Accueil</a></li>
        <li class="breadcrumb-item"><a href="/destinations">Destinations</a></li>
        <li class="breadcrumb-item active" aria-current="page"><%= destination.name %></li>
      </ol>
    </nav>
    <h1 class="text-center"><%= destination.name %></h1>
    <div class="text-center mb-4">
      <% if (destination.image) { %>
        <img src="/<%= destination.image %>" class="img-fluid" alt="<%= destination.name %>">
      <% } else { %>
        <img src="/path/to/default-image.jpg" class="img-fluid" alt="Default Image">
      <% } %>
    </div>
    <p><%= destination.description %></p>
    
    <h2>Hébergements</h2>
    <div class="mb-4">
      <form id="filter-form" class="form-inline">
        <select class="form-control mr-2" id="sortBy" name="sortBy">
          <option value="recent">Les plus récentes</option>
          <option value="popular">Les plus populaires</option>
          <option value="expensive">Les plus chères</option>
          <option value="cheap">Les moins chères</option>
        </select>
        <select class="form-control mr-2" id="themeFilter" name="theme">
          <option value="">Tous les thèmes</option>
          <% themes.forEach(theme => { %>
            <option value="<%= theme.id %>"><%= theme.name %></option>
          <% }); %>
        </select>
        <button type="submit" class="btn btn-primary">Filtrer</button>
      </form>
    </div>
    <div class="row">
      <% destination.Housings.forEach(housing => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <% if (housing.Photos && housing.Photos.length > 0) { %>
              <img src="/<%= housing.Photos[0].path %>" class="card-img-top" alt="<%= housing.title %>">
            <% } else { %>
              <img src="/path/to/default-image.jpg" class="card-img-top" alt="Default Image">
            <% } %>            
            <div class="card-body">
              <h5 class="card-title"><%= housing.title %></h5>
              <p class="card-text">Thème: <%= housing.Theme.name %></p>
              <p class="card-text">Prix: <%= housing.price %> €</p>
              <a href="/hebergements/<%= housing.id %>" class="btn btn-primary">Voir plus</a>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/single-hebergement.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= housing.title %></title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">

    <!-- File d'Ariane -->
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Accueil</a></li>
        <li class="breadcrumb-item"><a href="/hebergements">Hébergements</a></li>
        <li class="breadcrumb-item active" aria-current="page"><%= housing.title %></li>
      </ol>
    </nav>

    <h1 class="text-center"><%= housing.title %></h1>

    <!-- Date de publication et auteur -->
    <p class="text-muted">Publié le <%= new Date(housing.createdAt).toLocaleDateString('fr-FR', { year: 'numeric', month: 'long', day: 'numeric' }) %> par <%= housing.Owner ? housing.Owner.name : 'Inconnu' %></p>

    <div class="row">
      <div class="col-md-8">
        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
          <div class="carousel-inner">
            <% if (housing.Photos && housing.Photos.length > 0) { %>
              <% housing.Photos.forEach((photo, index) => { %>
                <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                  <img src="/<%= photo.path %>" class="d-block w-100" alt="<%= housing.title %>">
                </div>
              <% }) %>
            <% } else { %>
              <div class="carousel-item active">
                <img src="/path/to/default-image.jpg" class="d-block w-100" alt="Default Image">
              </div>
            <% } %>
          </div>
          <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
          </a>
          <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
          </a>
        </div>

        <!-- Catégories -->
        <p><strong>Catégories:</strong>
          <% housing.type.split(',').forEach(category => { %>
            <span class="badge badge-primary"><%= category.trim() %></span>
          <% }); %>
        </p>

        <!-- Thème -->
        <p><strong>Thème:</strong> <a href="/themes/<%= housing.Theme.id %>/hebergements"><%= housing.Theme.name %></a></p>
      </div>
      <div class="col-md-4">
        <h3>Prix: <%= housing.price %> €</h3>
        <h4>Capacité: <%= housing.capacity %> personnes</h4>
        <% if (housing.Destination) { %>
          <p>Destination: <a href="/destinations/<%= housing.Destination.id %>"><%= housing.Destination.name %></a></p>
        <% } %>
        <form action="/bookings/add" method="POST">
          <input type="hidden" name="housingId" value="<%= housing.id %>">
          <div class="form-group">
            <label for="startDate">Date d'arrivée</label>
            <input type="date" class="form-control" id="startDate" name="startDate" required>
          </div>
          <div class="form-group">
            <label for="endDate">Date de départ</label>
            <input type="date" class="form-control" id="endDate" name="endDate" required>
          </div>
          <div class="form-group">
            <label for="guests">Nombre de personnes</label>
            <input type="number" class="form-control" id="guests" name="guests" min="1" max="<%= housing.capacity %>" required>
          </div>
          <button type="submit" class="btn btn-primary">Réservez maintenant</button>
        </form>

        <!-- Box des équipements -->
        <div class="card mt-4">
          <div class="card-header">
            <h4>Équipements</h4>
          </div>
          <div class="card-body">
            <% if (housing.Equipments && housing.Equipments.length > 0) { %>
              <ul class="list-group">
                <% housing.Equipments.forEach(equipment => { %>
                  <li class="list-group-item">
                    <%= equipment.name %> - <span class="badge <%= equipment.type === 'premium' ? 'badge-warning' : 'badge-secondary' %>"><%= equipment.type %></span>
                  </li>
                <% }) %>
              </ul>
            <% } else { %>
              <p>Aucun équipement disponible.</p>
            <% } %>
          </div>
        </div>
        

      </div>
    </div>

    <hr>
    <h3>Informations complémentaires</h3>
    <div class="mt-4">
      <%- housing.description %>
    </div>

    <!-- Bouton pour le formulaire de contact -->
    <button class="btn btn-primary" data-toggle="modal" data-target="#contactFormModal">Contacter l'hebergeur</button>

    
    <!-- Modal du formulaire de contact -->
    <div class="modal fade" id="contactFormModal" tabindex="-1" role="dialog" aria-labelledby="contactFormModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="contactFormModalLabel">Contacter l'hôte pour <%= housing.title %></h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="contactForm" method="POST" action="/hebergements/sendMessage">
              <div class="form-group">
                <label for="name">Nom et Prénom</label>
                <input type="text" class="form-control" id="name" name="name" required>
              </div>
              <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" name="email" required>
              </div>
              <div class="form-group">
                <label for="phone">Numéro (facultatif)</label>
                <input type="text" class="form-control" id="phone" name="phone">
              </div>
              <div class="form-group">
                <label for="content">Message</label>
                <textarea class="form-control" id="content" name="content" rows="5" required></textarea>
              </div>
                <!-- Les autres champs du formulaire -->
                <input type="hidden" name="housingId" value="<%= housing.id %>">
                <button type="submit" class="btn btn-primary">Envoyer</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    
    <!-- Résumé des évaluations -->
    <div class="mt-5">
      <h3>Résumé des évaluations</h3>
      <% 
        let totalRating = 0;
        let totalComments = housing.Comments ? housing.Comments.length : 0;
        housing.Comments && housing.Comments.forEach(comment => {
          totalRating += comment.rating;
        });
        let averageRating = totalComments ? (totalRating / totalComments).toFixed(1) : 0;
      %>
      <div class="d-flex align-items-center">
        <h4 class="mb-0"><%= averageRating %> / 5</h4>
        <div class="ml-3">
          <% for(let i = 1; i <= 5; i++) { %>
            <i class="fas fa-star <%= i <= averageRating ? 'text-warning' : 'text-muted' %>"></i>
          <% } %>
        </div>
        <span class="ml-2">(<%= totalComments %> commentaires)</span>
      </div>
    </div>

    <!-- Section des commentaires -->
    <h3 class="mt-5">Commentaires</h3>
    <div class="list-group">
      <% housing.Comments && housing.Comments.forEach(comment => { %>
        <div class="list-group-item">
          <div class="d-flex align-items-center">
            <% if (comment.User && comment.User.photo) { %>
              <img src="/uploads/<%= comment.User.photo %>" alt="Profile Photo" class="rounded-circle mr-3" style="width: 50px; height: 50px;">
            <% } %>
            <div>
              <h5><%= comment.User ? comment.User.firstName + ' ' + comment.User.lastName : 'Anonyme' %></h5>
              <div>
                <% for(let i = 1; i <= 5; i++) { %>
                  <i class="fas fa-star <%= i <= comment.rating ? 'text-warning' : 'text-muted' %>"></i>
                <% } %>
              </div>
            </div>
          </div>
          <p class="mt-2"><%= comment.content %></p>
          <% if (comment.photo) { %>
            <img src="/uploads/<%= comment.photo %>" alt="Comment Photo" class="img-thumbnail" style="max-width: 200px;">
          <% } %>
          <% if (comment.User && comment.User.id === user.id) { %>
            <form action="/comments/<%= housing.id %>/comments/<%= comment.id %>/edit" method="POST" enctype="multipart/form-data" class="mt-2">
              <input type="hidden" name="_method" value="PUT">
              <div class="form-group">
                <label for="content">Commentaire</label>
                <textarea class="form-control" id="content" name="content" required><%= comment.content %></textarea>
              </div>
              <div class="form-group">
                <label for="rating">Évaluation</label>
                <input type="number" class="form-control" id="rating" name="rating" value="<%= comment.rating %>" min="0" max="5" required>
              </div>
              <div class="form-group">
                <label for="photo">Photo</label>
                <input type="file" class="form-control-file" id="photo" name="photo">
              </div>
              <button type="submit" class="btn btn-primary">Modifier</button>
            </form>
            <form action="/comments/<%= housing.id %>/comments/<%= comment.id %>/delete" method="POST" class="mt-2">
              <input type="hidden" name="_method" value="DELETE">
              <button type="submit" class="btn btn-danger">Supprimer</button>
            </form>
          <% } %>
        </div>
      <% }) %>
    </div>

    <!-- Formulaire d'ajout de commentaire -->
    <h4>Ajouter un commentaire</h4>
    <form action="/comments/<%= housing.id %>/comments" method="POST" enctype="multipart/form-data">
      <div class="form-group">
        <label for="content">Commentaire</label>
        <textarea class="form-control" id="content" name="content" required></textarea>
      </div>
      <div class="form-group">
        <label for="rating">Évaluation</label>
        <input type="number" class="form-control" id="rating" name="rating" min="0" max="5" required>
      </div>
      <div class="form-group">
        <label for="photo">Photo</label>
        <input type="file" class="form-control-file" id="photo" name="photo">
      </div>
      <button type="submit" class="btn btn-primary">Soumettre</button>
    </form>
  </div>
  <%- include('partials/footer') %>

<script>
  $(document).ready(function() {
    $('#contactFormModal form').on('submit', function(event) {
      event.preventDefault(); // Empêcher le rechargement de la page

      var formData = $(this).serialize(); // Récupérer les données du formulaire

      $.ajax({
        type: 'POST',
        url: '/hebergements/sendMessage', // URL d'envoi du formulaire
        data: formData,
        success: function(response) {
          $('#contactFormModal').modal('hide'); // Fermer le pop-up
          alert('Message envoyé avec succès !'); // Afficher un message de succès
          window.location.href = '/hebergements/' + $('input[name="housingId"]').val(); // Rediriger vers la page de l'hébergement
        },
        error: function() {
          alert('Une erreur est survenue, veuillez réessayer.');
        }
      });
    });
  });
</script>


  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"></script>
</body>
</html>


-------------------------------
- views/single-page.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= page.seoTitle || page.title %></title>
  <meta name="description" content="<%= page.seoDescription || '' %>">
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">

    <!-- File d'Ariane -->
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Accueil</a></li>
        <li class="breadcrumb-item active" aria-current="page"><%= page.title %></li>
      </ol>
    </nav>

    <h1 class="text-center"><%= page.title %></h1>

    <!-- Date de publication -->
    <p class="text-muted text-center">Publié le <%= new Date(page.createdAt).toLocaleDateString() %></p>

    <!-- Photo de la page -->
    <% if (page.photo) { %>
      <div class="text-center">
        <img src="/uploads/<%= page.photo %>" alt="<%= page.title %>" class="img-fluid mb-4">
      </div>
    <% } %>

    <!-- Contenu de la page -->
    <div class="container mt-5">
        <div class="row">
          <div class="col-md-12">
            <p><%- page.content %></p>
          </div>
        </div>     
    </div>

  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/single-theme.ejs :
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hébergements - <%= theme.name %></title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Accueil</a></li>
        <li class="breadcrumb-item"><a href="/themes">Thèmes</a></li>
        <li class="breadcrumb-item active" aria-current="page"><%= theme.name %></li>
      </ol>
    </nav>
    <h1 class="text-center"><%= theme.name %></h1>
    <h2 class="text-center text-muted"><%= theme.subtitle %></h2>
    <div class="text-center mb-4">
      <% if (theme.image) { %>
        <img src="/<%= theme.image %>" class="img-fluid" alt="<%= theme.name %>">
      <% } %>
    </div>
    <p><%= theme.description %></p>
    <div class="text-center mb-4">
      <a href="/themes/<%= theme.id %>/hebergements?sortBy=recent" class="btn btn-info">Les plus récentes</a>
      <a href="/themes/<%= theme.id %>/hebergements?sortBy=popular" class="btn btn-info">Les plus populaires</a>
      <a href="/themes/<%= theme.id %>/hebergements?sortBy=expensive" class="btn btn-info">Les plus chères</a>
      <a href="/themes/<%= theme.id %>/hebergements?sortBy=cheap" class="btn btn-info">Les moins chères</a>
    </div>
    <div class="row">
      <% housings.forEach(housing => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <% if (housing.Photos && housing.Photos.length > 0) { %>
              <img src="/<%= housing.Photos[0].path %>" class="card-img-top" alt="<%= housing.title %>">
            <% } else { %>
              <img src="/path/to/default-image.jpg" class="card-img-top" alt="Default Image">
            <% } %>
            <div class="card-body">
              <h5 class="card-title"><%= housing.title %></h5>
              <p class="card-text"><%= housing.description.substring(0, 100) %>...</p>
              <a href="/hebergements/<%= housing.id %>" class="btn btn-primary">Voir plus</a>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
- views/themes.ejs :
<!-- views/themes.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Thèmes</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/nav') %>
  <div class="container mt-5">
    <h1 class="text-center">Thèmes</h1>
    <div class="row">
      <% themes.forEach(theme => { %>
        <div class="col-md-4">
          <div class="card mb-4">
            <% if (theme.image) { %>
              <img src="/<%= theme.image %>" class="card-img-top" alt="<%= theme.name %>">
            <% } %>
            <div class="card-body">
              <h5 class="card-title"><%= theme.name %></h5>
              <h6 class="card-subtitle mb-2 text-muted"><%= theme.subtitle %></h6>
              <p class="card-text"><%= theme.description %></p>
              <a href="/themes/<%= theme.id %>/hebergements" class="btn btn-primary">Voir les hébergements</a>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
  <%- include('partials/footer') %>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>


-------------------------------
app.js :

const express = require('express');
const bodyParser = require('body-parser');
const session = require('express-session');
const passport = require('passport');
const flash = require('connect-flash');
require('dotenv').config();
const db = require('./models');
const initializePassport = require('./config/passport');
const path = require('path');

const app = express();
initializePassport(passport);

app.use('/node_modules', express.static(path.join(__dirname, 'node_modules')));

// Configuration pour servir les fichiers statiques
app.use(express.static(path.join(__dirname, 'public')));

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

app.use(session({
  secret: process.env.SESSION_SECRET || 'defaultsecret',
  resave: false,
  saveUninitialized: false,
}));

app.use(flash());
app.use(passport.initialize());
app.use(passport.session());

app.use((req, res, next) => {
  res.locals.user = req.user || null;
  res.locals.error = req.flash('error');
  next();
});

app.use(express.static(path.join(__dirname, 'public')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

const homeRoutes = require('./routes/home');
const pagesRoutes = require('./routes/pages');
const destinationsRoutes = require('./routes/destinations');
const hebergementsRoutes = require('./routes/hebergements');
const blogRoutes = require('./routes/blog');
const hoteRoutes = require('./routes/hote');
const authRoutes = require('./routes/auth');
const bookingRoutes = require('./routes/bookings');
const themesRoutes = require('./routes/themes');
const commentsRoutes = require('./routes/comments');
const adminRoutes = require('./routes/admin');
const contactRoutes = require('./routes/contact');

// Route pour la page d'accueil
app.use('/', homeRoutes);

// Autres routes
app.use('/destinations', destinationsRoutes);
app.use('/hebergements', hebergementsRoutes);
app.use('/blog', blogRoutes);
app.use('/hote', hoteRoutes);
app.use(authRoutes);
app.use('/bookings', bookingRoutes);
app.use('/themes', themesRoutes);
app.use('/comments', commentsRoutes);
app.use('/contact', contactRoutes);

// Route pour le panneau d'administration
app.use('/admin', require('./middleware/auth').ensureAdminOrHebergeur, adminRoutes);
app.use('/admin/pages', pagesRoutes);

// Routes pour les pages dynamiques
app.use('/', pagesRoutes);

db.sequelize.sync({ alter: true }).then(() => {
  console.log('Database & tables updated!');
  const PORT = process.env.PORT || 3001;
  app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
  });
}).catch(err => {
  console.error('Error synchronizing database:', err);
});


-------------------------------
db.js :
const mysql = require('mysql2');

const connection = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME
});

connection.connect((err) => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Connected to the MySQL database');
});

module.exports = connection;



-------------------------------
addEquipments.ejs :

const { Sequelize, DataTypes } = require('sequelize');
require('dotenv').config();

const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASS, {
  host: process.env.DB_HOST,
  dialect: 'mysql',
  port: process.env.DB_PORT,
  dialectOptions: {
    connectTimeout: 60000 // 60 seconds
  }
});

const Equipment = sequelize.define('Equipment', {
  name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  type: {
    type: DataTypes.STRING,
    allowNull: false, // simple or premium
  },
});

const equipments = [
  // Equipements simples
  { name: 'Lits', type: 'simple' },
  { name: 'Chauffage', type: 'simple' },
  { name: 'Wi-Fi', type: 'simple' },
  { name: 'Télévision', type: 'simple' },
  { name: 'Air conditionné', type: 'simple' },
  { name: 'Machine à laver', type: 'simple' },
  { name: 'Réfrigérateur', type: 'simple' },
  { name: 'Micro-ondes', type: 'simple' },
  { name: 'Plaque de cuisson', type: 'simple' },
  { name: 'Ustensiles de cuisine', type: 'simple' },

  // Equipements premiums
  { name: 'Jacuzzi', type: 'premium' },
  { name: 'Petit déjeuner inclus', type: 'premium' },
  { name: 'Service de ménage', type: 'premium' },
  { name: 'Piscine privée', type: 'premium' },
  { name: 'Salle de sport', type: 'premium' },
  { name: 'Sauna', type: 'premium' },
  { name: 'Vue sur la mer', type: 'premium' },
  { name: 'Balcon privé', type: 'premium' },
  { name: 'Cheminée', type: 'premium' },
  { name: 'Barbecue', type: 'premium' },
  { name: 'Transfert aéroport', type: 'premium' },
  { name: 'Service de conciergerie', type: 'premium' },
  { name: 'Bain à remous', type: 'premium' },
  { name: 'Cinéma privé', type: 'premium' },
  { name: 'Coffre-fort', type: 'premium' },
  { name: 'Produits de toilette de luxe', type: 'premium' },
  { name: 'Lit bébé', type: 'premium' },
  { name: 'Parking privé', type: 'premium' },
  { name: 'Animaux autorisés', type: 'premium' },
  { name: 'Salle de jeux', type: 'premium' },
];

async function addEquipments() {
  try {
    await sequelize.authenticate(); // Vérifier la connexion à la base de données
    console.log('Connection has been established successfully.');
    await sequelize.sync(); // Synchroniser le modèle avec la base de données
    for (const equipment of equipments) {
      await Equipment.create(equipment);
    }
    console.log('Equipments added successfully');
  } catch (err) {
    console.error('Error adding equipments:', err);
  } finally {
    await sequelize.close(); // Fermer la connexion après l'opération
  }
}

addEquipments();


voila tous les fichiers essantiels de mon projet du site, atypik house, c'est un site de location hebergement ...

maintenant je te demande de faire plusieur analyse profonde et tres tres detailés sur tous les fichiers et les lignes de codes et de entregistrer le projet, comme ca les prochaines quetions que je te pose, tu peux me repondre en fonction de ce projet !


dans mon prochaine message je vais t'envoyer la maquette de la page d'acceuil en png !


