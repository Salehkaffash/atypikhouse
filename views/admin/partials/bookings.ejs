<div class="container">
    <div class="row">
      <div class="col-md-12 py-5">
          <div class="card-header card-header-primary">
            <h4 class="txt-green h2">Gestion des Réservations</h4>
            <p class="txt-green">Bienvenue dans la section de gestion des réservations. Vous pouvez utiliser le calendrier ci-dessous pour bloquer des dates, réserver des créneaux ou annuler des réservations existantes.</p>
          </div>
            <div class="form-group py-3">
                <label for="housingSelect">Sélectionnez un hébergement :</label>
                <select id="housingSelect" class="form-control">
                    <% housings.forEach(housing => { %>
                        <option value="<%= housing.id %>"><%= housing.title %></option>
                    <% }) %>
                </select>
            </div>
            <div id="calendar" class="py-4"></div>

            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Hébergement</th>
                            <th>Date de début</th>
                            <th>Date de fin</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% 
                            let allBookings = bookings.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));

                            allBookings.forEach(booking => { %>
                            <tr>
                                <td><%= booking.id %></td>
                                <td><%= booking.housing.title %></td>
                                <td><%= new Date(booking.startDate).toLocaleDateString('fr-FR') %></td>
                                <td><%= new Date(booking.endDate).toLocaleDateString('fr-FR') %></td>
                                <td><%= booking.status %></td>
                                <td>
                                    <% if (booking.status === 'pending') { %>
                                        <button class="btn btn-success" onclick="updateBookingStatus(<%= booking.id %>, 'confirmed')">Confirmer</button>
                                        <button class="btn btn-danger" onclick="updateBookingStatus(<%= booking.id %>, 'cancelled')">Annuler</button>
                                    <% } else if (booking.status === 'confirmed') { %>
                                        <button class="btn btn-warning" onclick="updateBookingStatus(<%= booking.id %>, 'pending')">Revenir en attente</button>
                                    <% } else if (booking.status === 'blocked') { %>
                                        <button class="btn btn-secondary" onclick="updateBookingStatus(<%= booking.id %>, 'pending')">Débloquer</button>
                                    <% } else if (booking.status === 'cancelled') { %>
                                        <span class="badge bg-danger">Annulée</span>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.8/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.8/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/interaction@6.1.8/index.global.min.js"></script>

    <script>
document.addEventListener('DOMContentLoaded', function() {
    var housingSelect = document.getElementById('housingSelect');
    var calendarEl = document.getElementById('calendar');

    if (!housingSelect || !calendarEl) {
        console.error("Élément manquant dans le DOM.");
        return;
    }

    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        selectable: true,
        selectOverlap: false,
        events: function(fetchInfo, successCallback, failureCallback) {
            var housingId = housingSelect.value;

            fetch(`/admin/bookings/events/${housingId}`)
                .then(response => response.json())
                .then(events => {
                    const today = new Date().toISOString().split('T')[0];
                    events.forEach(event => {
                        if (event.end < today) {
                            event.color = 'gray';
                            event.title = 'Passé';
                        }
                    });
                    successCallback(events);
                })
                .catch(error => {
                    console.error("Erreur lors de la récupération des événements:", error);
                    failureCallback(error);
                });
        },
        select: function(info) {
            // Ouverture de la modal pour réserver ou bloquer une date
            openModal(info.startStr, info.endStr);
        },
        eventClick: function(info) {
            if (new Date(info.event.start) >= new Date()) {
                if (confirm("Voulez-vous annuler cette réservation ou débloquer ce créneau ?")) {
                    handleBookingAction('cancel', info.event.startStr, info.event.endStr);
                }
            } else {
                alert("Vous ne pouvez pas annuler une réservation passée.");
            }
        }
    });

    calendar.render();

    housingSelect.addEventListener('change', function() {
        calendar.refetchEvents();
    });

    function openModal(startDate, endDate) {
        var modal = document.getElementById("myModal");
        var span = document.getElementsByClassName("close")[0];
        var form = document.getElementById("bookingForm");

        form.onsubmit = function(e) {
            e.preventDefault();
            var action = document.querySelector('input[name="action"]:checked').value;
            handleBookingAction(action, startDate, endDate);
            modal.style.display = "none";
        };

        modal.style.display = "block";

        span.onclick = function() {
            modal.style.display = "none";
        };

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        };
    }

    function handleBookingAction(action, startDate, endDate) {
        var housingId = housingSelect.value;
        var url = '';
        var data = { startDate: startDate, endDate: endDate, housingId: housingId };

        if (action === 'block') {
            url = '/admin/bookings/block';
        } else if (action === 'cancel') {
            url = '/admin/bookings/cancel';
        }

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errData => {
                    throw new Error(errData.message || 'Erreur lors de l\'exécution de l\'action.');
                });
            }
            return response.json();
        })
        .then(data => {
            calendar.refetchEvents();
            alert(data.message);
        })
        .catch(error => {
            console.error('Erreur:', error);
            alert(error.message);
        });
    }
});

function updateBookingStatus(bookingId, status) {
    fetch(`/admin/bookings/${bookingId}/status`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: status })
    })
    .then(response => {
        if (response.ok) {
            window.location.reload();
        } else {
            return response.json().then(errData => {
                throw new Error(errData.message || 'Erreur lors de la mise à jour du statut.');
            });
        }
    })
    .catch(error => {
        alert(error.message);
    });
}
    </script>

    <!-- Modal -->
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3>Choisissez une action pour ces dates</h3>
            <form id="bookingForm">
                <label>
                    <input type="radio" name="action" value="block"> Bloquer
                </label><br>
                <label>
                    <input type="radio" name="action" value="cancel"> Annuler
                </label><br><br>
                <button type="submit">Valider</button>
            </form>
        </div>
    </div>
